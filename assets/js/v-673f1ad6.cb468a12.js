(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[1335],{7209:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-673f1ad6",path:"/interview/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98-%E6%9F%AF%E9%87%8C%E5%8C%96.html",title:"前端面试问题-柯里化",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"闭包的概念",slug:"闭包的概念",children:[]},{level:2,title:"柯里化",slug:"柯里化",children:[]}],filePathRelative:"interview/前端/前端面试问题-柯里化.md",git:{updatedTime:162452411e4,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},8555:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="前端面试问题-柯里化"><a class="header-anchor" href="#前端面试问题-柯里化">#</a> 前端面试问题-柯里化</h1><h2 id="闭包的概念"><a class="header-anchor" href="#闭包的概念">#</a> 闭包的概念</h2><blockquote><p>闭包是定义在一个函数内部的函数，内部函数持有外部函数内变量的引用，可以通过闭包函数访问外部变量。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//f2是一个闭包</span>\n        <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> f2<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="柯里化"><a class="header-anchor" href="#柯里化">#</a> 柯里化</h2><blockquote><p>柯里化：把多参函数变成单参函数调用。</p></blockquote><p>示例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">*</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//柯里化函数</span>\n<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">*</span> c\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>即有<code>fn(2,3,4) == fn2(2)(3)(4)</code> 可以看到fn2是返回一个嵌套函数的调用。fn2(2)返回一个函数，可以用它调用的函数fn2(2)(3)，其又返回一个函数，可以继续调用fn2(2)(3)(4)。实现了单参数调用。</p></blockquote>',9),e={render:function(n,s){return p}}}}]);