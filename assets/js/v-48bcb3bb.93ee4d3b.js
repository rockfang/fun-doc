(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[4875],{45:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-48bcb3bb",path:"/interview/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"面试问题-赋值运算与浅拷贝深拷贝",slug:"面试问题-赋值运算与浅拷贝深拷贝",children:[{level:3,title:"赋值运算",slug:"赋值运算",children:[]},{level:3,title:"浅拷贝",slug:"浅拷贝",children:[]},{level:3,title:"深拷贝",slug:"深拷贝",children:[]}]}],filePathRelative:"interview/前端/面试问题-赋值运算与浅拷贝深拷贝.md",git:{updatedTime:1625474259e3,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},7320:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>c});var p=a(6252);const t=(0,p.uE)('<h2 id="面试问题-赋值运算与浅拷贝深拷贝"><a class="header-anchor" href="#面试问题-赋值运算与浅拷贝深拷贝">#</a> 面试问题-赋值运算与浅拷贝深拷贝</h2><ol><li>首先我们知道基本数据类型变量存储是在栈内存中，引用数据类型的变量是存在堆当中。</li><li>一般讨论浅拷贝和深拷贝是针对引用数据类型。 浅拷贝即拷贝数据的引用，并没有拷贝堆中的内存单元</li></ol><h3 id="赋值运算"><a class="header-anchor" href="#赋值运算">#</a> 赋值运算</h3><p>赋值操作，两个对象的引用obj和fuzhiObj都只向同一个内存单元。因此通过任何一个引用改变的值，指向的对象都会改变。打印的是最新的对象信息，即：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>\n  scors<span class="token operator">:</span> <span class="token punctuation">{</span>\n    english<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>\n    math<span class="token operator">:</span> <span class="token number">85</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> fuzhiObj <span class="token operator">=</span> obj\nfuzhiObj<span class="token punctuation">.</span>scors<span class="token punctuation">.</span>english <span class="token operator">=</span> <span class="token number">100</span>\nfuzhiObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;lisi&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fuzhiObj<span class="token punctuation">)</span>\n<span class="token comment">// {name: &#39;lisi&#39;,age: 24,scors: {english:100,math:85}}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="浅拷贝"><a class="header-anchor" href="#浅拷贝">#</a> 浅拷贝</h3><p>浅拷贝：会创建一个新的对象，拷贝的是对象的属性</p><h4 id="_1-写一个浅拷贝的方法"><a class="header-anchor" href="#_1-写一个浅拷贝的方法">#</a> 1. 写一个浅拷贝的方法：</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>\n  scors<span class="token operator">:</span> <span class="token punctuation">{</span>\n    english<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>\n    math<span class="token operator">:</span> <span class="token number">85</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">shalowCopy</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>prop <span class="token keyword">in</span> src<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      copy<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>prop<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> copy\n<span class="token punctuation">}</span>\n\nshallowObj <span class="token operator">=</span> <span class="token function">shalowCopy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\nshallowObj<span class="token punctuation">.</span>scors<span class="token punctuation">.</span>english <span class="token operator">=</span> <span class="token number">0</span>\nshallowObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;lisi&#39;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">//age: 24 name: &quot;zhangsan&quot; scors: {english: 0, math: 85}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>shallowObj<span class="token punctuation">)</span> <span class="token comment">//age: 24 name: &quot;lisi&quot; scors: {english: 0, math: 85}</span>\n<span class="token comment">// 因为是创建新的对象，且拷贝引用。 因此基本数据类型name各自一份，但通过scors改变的对象的值是同一份</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>该方式特点：基本数据类型各自一份，引用类型只拷贝引用，通过引用改变的对象是同一个（所以是浅拷贝）</p><h4 id="_2-object-assign-srcobj-方法实现浅拷贝"><a class="header-anchor" href="#_2-object-assign-srcobj-方法实现浅拷贝">#</a> 2.<code>Object.assign({},srcObj)</code>方法实现浅拷贝</h4><p>注意参数是2个，第一个参数是空对象。 同上述自定义浅拷贝方法效果，基本数据类型各自一份，引用类型只拷贝引用，通过引用改变的对象是同一个（所以是浅拷贝）</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>\n  scors<span class="token operator">:</span> <span class="token punctuation">{</span>\n    english<span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>\n    math<span class="token operator">:</span> <span class="token number">85</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> assignObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\nassignObj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;lisi&#39;</span>\nassignObj<span class="token punctuation">.</span>scors<span class="token punctuation">.</span>english <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">//age: 24 name: &quot;zhangsan&quot; scors: {english: 0, math: 85}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>assignObj<span class="token punctuation">)</span> <span class="token comment">//age: 24 name: &quot;lisi&quot; scors: {english: 0, math: 85}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>对于子元素都是 <strong>原始类型</strong> 的对象深拷贝，其实也可以使用<code>Object.assign</code>实现。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>b<span class="token operator">:</span> <span class="token number">124</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> d <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token operator">:</span><span class="token number">125</span><span class="token punctuation">,</span>d<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment">//{a：123,b:124}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token comment">//{a：123,b:125,d:0}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote><h4 id="_3-array-concat-和array-slice-实现的浅拷贝效果"><a class="header-anchor" href="#_3-array-concat-和array-slice-实现的浅拷贝效果">#</a> 3. <code>Array.concat()</code>和<code>Array.slice()</code>实现的浅拷贝效果</h4><p>同样可以理解为：基本类型元素的数据各自一份，引用类型数据是浅拷贝。只拷贝引用，通过引用改变的对象是同一个</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    username<span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">//let arr2=arr.concat(); </span>\n<span class="token keyword">let</span> arr2<span class="token operator">=</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\narr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\narr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[1,3,{username:&#39;lisi&#39;}]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[5,3,{username:&#39;lisi&#39;}]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>对于子元素都是 <strong>原始类型</strong> 的对数组的深拷贝，其实也可以使用<code>Array.slice</code>实现。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> h <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">//[1, 2, 3]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token comment">//[1, 2, 3]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[2]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>数组slice和split区别</p><p>slice: 切割数组，生成新数组</p><p>split: 删除插入数据到原数组，修改原数组本身。</p></blockquote></blockquote><h3 id="深拷贝"><a class="header-anchor" href="#深拷贝">#</a> 深拷贝</h3><h4 id="_1-利用json-parse-json-stringify-obj-实现深拷贝"><a class="header-anchor" href="#_1-利用json-parse-json-stringify-obj-实现深拷贝">#</a> 1. 利用<code>JSON.parse(JSON.stringify(obj))</code>实现深拷贝</h4><p>通过转json字符串，再转成json对象，变成一个新的对象，开辟新的栈空间，两个对象各自没有关联。实现深拷贝 缺点：不能拷贝方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;funtion&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    username<span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\narr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span>\narr2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string">&#39;lisi&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1,function(){},{username:&#39;zhangsan&#39;}]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span> <span class="token comment">//[5,null,{username:&#39;lisi&#39;}]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_2-自定义深拷贝方法"><a class="header-anchor" href="#_2-自定义深拷贝方法">#</a> 2. 自定义深拷贝方法</h4><p>网友提供的方法通过递归调用，拷贝所有的属性值。最终实现深拷贝：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">checkedType</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//实现深度克隆---对象/数组</span>\n<span class="token keyword">function</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//判断拷贝的数据类型</span>\n  <span class="token comment">//初始化变量result 成为最终克隆的数据</span>\n  <span class="token keyword">let</span> result<span class="token punctuation">,</span>\n    targetType <span class="token operator">=</span> <span class="token function">checkedType</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">===</span> <span class="token string">&#39;Object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">===</span> <span class="token string">&#39;Array&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> target\n  <span class="token punctuation">}</span>\n  <span class="token comment">//遍历目标数据</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//获取遍历数据结构的每一项值。</span>\n    <span class="token keyword">let</span> value <span class="token operator">=</span> target<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token comment">//判断目标结构里的每一值是否存在对象/数组</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      <span class="token function">checkedType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;Object&#39;</span> <span class="token operator">||</span>\n      <span class="token function">checkedType</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;Array&#39;</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//对象/数组里嵌套了对象/数组</span>\n      <span class="token comment">//继续遍历获取到value值</span>\n      result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">//获取到value值是基本的数据类型或者是函数。</span>\n      result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><blockquote><p>可以理解数组和对象都是 <strong>索引类型</strong></p><p>可通过<code>for in</code>方式遍历元素</p></blockquote><h4 id="_3-第三方库loadash提供的深拷贝方法-clonedeep-obj"><a class="header-anchor" href="#_3-第三方库loadash提供的深拷贝方法-clonedeep-obj">#</a> 3. 第三方库<code>loadash</code>提供的深拷贝方法<code>_.cloneDeep(obj)</code></h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;lodash&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    b<span class="token operator">:</span> <span class="token punctuation">{</span> f<span class="token operator">:</span> <span class="token punctuation">{</span> g<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    c<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',28),e={href:"https://juejin.im/post/5b5dcf8351882519790c9a2e#heading-0",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("参考链接：浅拷贝与深拷贝"),c={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("p",null,[(0,p.Wm)("a",e,[o,(0,p.Wm)(a)])])],64)}}}}]);