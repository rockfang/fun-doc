(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[7061],{3912:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-35c1ec11",path:"/typescript/TS%E4%B8%AD%E7%9A%84%E5%A2%9E%E5%BC%BA%E7%B1%BB%E5%9E%8B.html",title:"TS中的增强类型",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"交叉类型",slug:"交叉类型",children:[]},{level:2,title:"类型保护",slug:"类型保护",children:[]},{level:2,title:"联合类型",slug:"联合类型",children:[]},{level:2,title:"可辨识联合类型",slug:"可辨识联合类型",children:[]},{level:2,title:"类型转换",slug:"类型转换",children:[]},{level:2,title:"索引类型",slug:"索引类型",children:[]},{level:2,title:"函数重载",slug:"函数重载",children:[]},{level:2,title:"可选链",slug:"可选链",children:[]},{level:2,title:"空值合并",slug:"空值合并",children:[]}],filePathRelative:"typescript/TS中的增强类型.md",git:{updatedTime:1624500867e3,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},8066:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>m});var p=a(6252);const t=(0,p.uE)('<h1 id="ts中的增强类型"><a class="header-anchor" href="#ts中的增强类型">#</a> TS中的增强类型</h1><h2 id="交叉类型"><a class="header-anchor" href="#交叉类型">#</a> 交叉类型</h2><p>交叉类型（Intersection Types）是将多个类型合并为一个类型，包含了所需的所有类型的特性</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Admin</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token builtin">string</span>\n\tprivileges<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Employee</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token builtin">string</span>\n\tregistTime<span class="token operator">:</span> Date\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Manager</span> <span class="token operator">=</span> Admin <span class="token operator">&amp;</span> Employee\n\n<span class="token keyword">const</span> m<span class="token operator">:</span> Manager <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token string">&#39;fun&#39;</span><span class="token punctuation">,</span>\n\tprivileges<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;manager&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\tregistTime<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Combinable</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n<span class="token keyword">type</span> <span class="token class-name">Numeric</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Universal</span> <span class="token operator">=</span> Combinable <span class="token operator">&amp;</span> Numeric\n<span class="token keyword">const</span> u<span class="token operator">:</span> Universal <span class="token operator">=</span> <span class="token number">9527</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="类型保护"><a class="header-anchor" href="#类型保护">#</a> 类型保护</h2><p>Type Guards</p><p>使用<code>typeof</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Combinable</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n<span class="token keyword">const</span> <span class="token function-variable function">addFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> Combinable<span class="token punctuation">,</span>b<span class="token operator">:</span> Combinable<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> b <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>使用 <code>in</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Admin</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token builtin">string</span>\n\tprivileges<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Employee</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token builtin">string</span>\n\tregistTime<span class="token operator">:</span> Date\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">UnknownRole</span> <span class="token operator">=</span> Admin <span class="token operator">|</span> Employee\n<span class="token keyword">function</span> <span class="token function">printInfo</span><span class="token punctuation">(</span>person<span class="token operator">:</span> UnknownRole<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n    <span class="token comment">//检测对象属性</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;privileges&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>privileges<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;registTime&#39;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>registTime<span class="token punctuation">)</span> \n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>使用 <code>instanceof</code></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>\n    <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;driving...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Truck</span> <span class="token punctuation">{</span>\n    <span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;driveTruck...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">loadBigTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;load big tree&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">type</span> <span class="token class-name">Vehicle</span> <span class="token operator">=</span> Car <span class="token operator">|</span> Truck\n\n<span class="token keyword">const</span> v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> v2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Truck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">useVehicle</span><span class="token punctuation">(</span>vehicle<span class="token operator">:</span> Vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    vehicle<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">&quot;loadBigTree&quot;</span> <span class="token keyword">in</span> vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vehicle<span class="token punctuation">.</span><span class="token function">loadBigTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span><span class="token punctuation">(</span>vehicle <span class="token keyword">instanceof</span> <span class="token class-name">Truck</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        vehicle<span class="token punctuation">.</span><span class="token function">loadBigTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">useVehicle</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p><strong>总结</strong></p><table><thead><tr><th>关键字</th><th>使用场景</th></tr></thead><tbody><tr><td>typeof</td><td>js中的内置类型</td></tr><tr><td>属性 in 对象</td><td>自定义类中对象的属性/方法</td></tr><tr><td>instanceof</td><td>自定义类中对象的属性（只对<code>class</code>定义的类有效）</td></tr></tbody></table>',14),e=(0,p.Wm)("p",null,"instanceof不能用在interface定义的接口上。",-1),o=(0,p.Uk)("因为instanceof是js的特性 "),c={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("mdn-instanceof"),r=(0,p.Uk)(",而interface编译成js文件，是无痕的。(interface是ts特性，只在编译器有效)"),i=(0,p.uE)('<h2 id="联合类型"><a class="header-anchor" href="#联合类型">#</a> 联合类型</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Combinable</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n<span class="token keyword">type</span> <span class="token class-name">Numeric</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="可辨识联合类型"><a class="header-anchor" href="#可辨识联合类型">#</a> 可辨识联合类型</h2><p>Discriminated Unions</p><p><strong>不能使用instanceof区分</strong>接口实例</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span> \n\tflyingSpeed<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Horse</span> <span class="token punctuation">{</span>\n\tgroundSpeed<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Animal</span> <span class="token operator">=</span> Bird <span class="token operator">|</span> Horse\n\n<span class="token keyword">function</span> <span class="token function">moveAimal</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;flyingSpeed&#39;</span> <span class="token keyword">in</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Moving speed is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>animal<span class="token punctuation">.</span>flyingSpeed<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;groundSpeed&#39;</span> <span class="token keyword">in</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Moving speed is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>animal<span class="token punctuation">.</span>groundSpeed<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>可通过定义可辨识的类型属性来区分：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&#39;bird&#39;</span>\n\tflyingSpeed<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Horse</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&#39;horse&#39;</span>\n\tgroundSpeed<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Animal</span> <span class="token operator">=</span> Bird <span class="token operator">|</span> Horse\n\n<span class="token keyword">function</span> <span class="token function">moveAimal</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> speed\n\t<span class="token keyword">switch</span> <span class="token punctuation">(</span>animal<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">case</span> <span class="token string">&#39;bird&#39;</span><span class="token operator">:</span>\n            speed <span class="token operator">=</span> animal<span class="token punctuation">.</span>flyingSpeed\n\t\t\t<span class="token keyword">break</span>\n\t\t<span class="token keyword">case</span> <span class="token string">&#39;horse&#39;</span><span class="token operator">:</span>\n            speed <span class="token operator">=</span> animal<span class="token punctuation">.</span>groundSpeed\n\t\t\t<span class="token keyword">break</span>\n    <span class="token punctuation">}</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Moving speed is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>speed<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">moveAimal</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;type&#39;</span><span class="token operator">:</span><span class="token string">&#39;bird&#39;</span><span class="token punctuation">,</span>flyingSpeed<span class="token operator">:</span><span class="token number">213</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>这就是可辨识的联合类型</p><h2 id="类型转换"><a class="header-anchor" href="#类型转换">#</a> 类型转换</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 设置input标签的值。 需要是HTMLInputElement类型元素才行。</span>\n<span class="token keyword">const</span> userInput <span class="token operator">=</span> <span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;user-input&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span>\nuserInput<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;Hi&quot;</span>\n\n<span class="token keyword">const</span> userInput2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;user-input&quot;</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token keyword">as</span> HTMLInputElement\nuserInput2<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;Hi&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>！标记用法（exclamation mark ）</p><p>作用：标识前面的变量不会是null，从而避免ts中可能为null错误提示</p></blockquote><p><strong>总结</strong></p><table><thead><tr><th>使用方式</th><th>说明</th></tr></thead><tbody><tr><td><code>&lt;类名&gt;</code></td><td>在要转换的对象前添加 <code>&lt;要转换的类名&gt;</code></td></tr><tr><td><code>as 类名</code></td><td>在要转换的对象后添加 <code>as 类名</code></td></tr><tr><td><code>!</code></td><td>用于标识对象不会为null，置于对象末尾</td></tr></tbody></table><h2 id="索引类型"><a class="header-anchor" href="#索引类型">#</a> 索引类型</h2><p>Index types</p><p>在js中我们像，动态设置索引，通常是这样</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">pluck</span><span class="token punctuation">(</span><span class="token parameter">o<span class="token punctuation">,</span> names</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> o<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在ts中我们可以定义属性为动态字符串</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">ErrorContainer</span> <span class="token punctuation">{</span>\n\t<span class="token punctuation">[</span>prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">//含义 有一个string类型的属性，属性名不确定，值也是string类型</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> erroBag<span class="token operator">:</span> ErrorContainer <span class="token operator">=</span> <span class="token punctuation">{</span> \n\temail<span class="token operator">:</span> <span class="token string">&#39;email格式不对&#39;</span><span class="token punctuation">,</span>\n\tusername<span class="token operator">:</span> <span class="token string">&#39;username必须是字母开头&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="函数重载"><a class="header-anchor" href="#函数重载">#</a> 函数重载</h2><p>先看这样的场景，定义了一个addFn函数</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Combinable</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n<span class="token keyword">const</span> <span class="token function-variable function">addFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> Combinable<span class="token punctuation">,</span> b<span class="token operator">:</span> Combinable<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> b <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> myName <span class="token operator">=</span> <span class="token function">addFn</span><span class="token punctuation">(</span><span class="token string">&quot;cai&quot;</span><span class="token punctuation">,</span><span class="token string">&quot; fun&quot;</span><span class="token punctuation">)</span>\nmyName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>尽管逻辑上myName必定是<code>string</code>类型，但是<code>ts</code>会报错：</p><p><img src="https://fun-typora-pics.oss-cn-beijing.aliyuncs.com/img/20201204171239.png" alt="image-20201204170506021"></p><p>这种方式只能认为myName是自定义的Combinable类型</p><p>利用重载方式定义函数：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Combinable</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>\n<span class="token keyword">function</span> <span class="token function">addFn</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token keyword">function</span> <span class="token function">addFn</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token keyword">function</span> <span class="token function">addFn</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token keyword">function</span> <span class="token function">addFn</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token keyword">function</span> <span class="token function">addFn</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Combinable<span class="token punctuation">,</span> b<span class="token operator">:</span> Combinable<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> b <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> myName <span class="token operator">=</span> <span class="token function">addFn</span><span class="token punctuation">(</span><span class="token string">&#39;cai&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; fun&#39;</span><span class="token punctuation">)</span>\nmyName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这样就能通过ts校验了。</p><h2 id="可选链"><a class="header-anchor" href="#可选链">#</a> 可选链</h2><p>optional chaining</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> fetchData <span class="token operator">=</span> <span class="token punctuation">{</span>\n\tid<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n\tjobInfo<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tperiod<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>\n\t\tconfig<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">type</span><span class="token operator">:</span> <span class="token string">&#39;once&#39;</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fetchData<span class="token operator">?.</span>jobInfo<span class="token operator">?.</span>config<span class="token operator">?.</span><span class="token keyword">type</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',32),u={href:"https://jkchao.github.io/typescript-book-chinese/new/typescript-3.7.html#%E5%8F%AF%E9%80%89%E9%93%BE%EF%BC%88optional-chaining%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("可选链（optional-chaining）"),b=(0,p.uE)('<p>用于代替繁琐的非空判断。</p><h2 id="空值合并"><a class="header-anchor" href="#空值合并">#</a> 空值合并</h2><p>Nullish Coalescing</p><p>使用<code>??</code>符，实现<code>null</code>和<code>undefined</code>的合并</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">type</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> msg <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">??</span> <span class="token number">2</span><span class="token comment">//若type为0或者&#39;&#39;,都会认为是有效值</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> msg2 <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span><span class="token comment">//若type为0或者&#39;&#39;,会取后面的值</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>它和常规的<code>&amp;&amp;</code>区别是，前者只对<code>null</code>和<code>undefined</code>合并</p>',6),m={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("blockquote",null,[e,(0,p.Wm)("p",null,[o,(0,p.Wm)("a",c,[l,(0,p.Wm)(a)]),r])]),i,(0,p.Wm)("p",null,[(0,p.Wm)("a",u,[k,(0,p.Wm)(a)])]),b],64)}}}}]);