(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[1649],{3880:(n,a,e)=>{"use strict";e.r(a),e.d(a,{data:()=>s});const s={key:"v-82c0370e",path:"/interview/%E5%89%8D%E7%AB%AF/VUE%E5%B8%B8%E7%94%A8%E9%9D%A2%E8%AF%95%E9%A2%98.html",title:"VUE常用面试题",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"VUE 响应式的原理",slug:"vue-响应式的原理",children:[]},{level:3,title:"COMPUTED和WATCH区别",slug:"computed和watch区别",children:[]},{level:3,title:"VUE 中KEY的作用",slug:"vue-中key的作用",children:[]},{level:3,title:"NEXTTICK作用",slug:"nexttick作用",children:[]},{level:3,title:"DATA中为何要求返回函数",slug:"data中为何要求返回函数",children:[]}],filePathRelative:"interview/前端/VUE常用面试题.md",git:{updatedTime:162452411e4,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},8689:(n,a,e)=>{"use strict";e.r(a),e.d(a,{default:()=>v});var s=e(6252);const t=(0,s.Wm)("h1",{id:"vue常用面试题"},[(0,s.Wm)("a",{class:"header-anchor",href:"#vue常用面试题"},"#"),(0,s.Uk)(" VUE常用面试题")],-1),p=(0,s.Wm)("h3",{id:"vue-响应式的原理"},[(0,s.Wm)("a",{class:"header-anchor",href:"#vue-响应式的原理"},"#"),(0,s.Uk)(" VUE 响应式的原理")],-1),l={href:"https://cn.vuejs.org/v2/guide/reactivity.html",target:"_blank",rel:"noopener noreferrer"},c=(0,s.Uk)("https://cn.vuejs.org/v2/guide/reactivity.html"),o=(0,s.uE)('<blockquote><p>分析：Vue的响应式，就是围绕vue data中的数据如何渲染，改变数据后页面如何更新。</p></blockquote><p><strong>回答：</strong></p><ul><li>定义在data中的数据，vue会通过Object.defineProperty方式注册getter、setter方法</li><li>data中定义的数据和当前的组件绑定</li><li>每个组件实例都对应一个watcher实例，当其相关的data数据setter触发时，会通知watcher，从而使它关联的组件重新渲染。</li><li>这是一个 发布-订阅 模式</li></ul><h3 id="computed和watch区别"><a class="header-anchor" href="#computed和watch区别">#</a> COMPUTED和WATCH区别</h3><p>对比<code>computed</code>、<code>watch</code></p><table><thead><tr><th>属性/方法</th><th>能否执行异步操作</th><th>数据缓存</th></tr></thead><tbody><tr><td><code>computed</code></td><td>必须是同步</td><td>computed的值会做缓存</td></tr><tr><td><code>watch</code></td><td>可以做异步操作</td><td></td></tr></tbody></table><h3 id="vue-中key的作用"><a class="header-anchor" href="#vue-中key的作用">#</a> VUE 中KEY的作用</h3><p>key 是给每一个 vnode 的唯一 id,依靠 key,我们的 diff 操作可以更准确、更快速</p><h3 id="nexttick作用"><a class="header-anchor" href="#nexttick作用">#</a> NEXTTICK作用</h3>',9),r={href:"https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"},u=(0,s.Uk)("https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97"),i=(0,s.uE)('<ul><li>涉及到vue的异步更新队列，vue 用异步队列的方式来控制 DOM 更新和 nextTick 回调先后执行</li><li>为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 Vue.nextTick(callback)</li></ul><h3 id="data中为何要求返回函数"><a class="header-anchor" href="#data中为何要求返回函数">#</a> DATA中为何要求返回函数</h3><p>在组件化开发中，组件是可以复用的,如果data是一个对象，会引起同一个组件下的数据污染。 <strong>原因是：</strong></p><blockquote><p>Object是引用数据类型，其实每个实例中存的是这个对象的引用。当某个组件实例通过引用改变对象值，内存中对象的值就改变了，其他实例引用时，值就变化了，这就是所谓的污染。</p></blockquote><p><strong>为什么使用FUCNTION返回就不污染呢</strong></p><blockquote><p>如果通过函数返回一个对象。Function也是引用类型，但是每个组件实例，持有的是Function的引用，而不是Fucntion中的Object。 当组件复用时，其实是通过同一个Function 开辟了返回了不同的对象（开辟不同的Object内存空间），因此数据不会污染。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n\t<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span>\n\t\t\tmsgContent<span class="token operator">:</span> ””<span class="token punctuation">,</span>\n\t\t\tnickname<span class="token operator">:</span> ””<span class="token punctuation">,</span>\n\t\t\tbtnDisable<span class="token operator">:</span> <span class="token boolean">true</span>\n\t\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过NEW VUE()方式指定的DATA可以是对象,因为通过new Vue方式创建的实例不会被复用到。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\tel<span class="token operator">:</span> ”#parent”<span class="token punctuation">,</span>\n\tdata<span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\tislogined<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\t\tcanThirdPay<span class="token operator">:</span> <span class="token boolean">false</span>\n\t<span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',9),d=(0,s.Uk)("参考链接 "),h={href:"https://zhuanlan.zhihu.com/p/101330697",target:"_blank",rel:"noopener noreferrer"},k=(0,s.Uk)("https://zhuanlan.zhihu.com/p/101330697"),b={href:"https://zhuanlan.zhihu.com/p/103763164",target:"_blank",rel:"noopener noreferrer"},m=(0,s.Uk)("https://zhuanlan.zhihu.com/p/103763164"),v={render:function(n,a){const e=(0,s.up)("OutboundLink");return(0,s.wg)(),(0,s.j4)(s.HY,null,[t,p,(0,s.Wm)("p",null,[(0,s.Wm)("a",l,[c,(0,s.Wm)(e)])]),o,(0,s.Wm)("p",null,[(0,s.Wm)("a",r,[u,(0,s.Wm)(e)])]),i,(0,s.Wm)("p",null,[d,(0,s.Wm)("a",h,[k,(0,s.Wm)(e)]),(0,s.Wm)("a",b,[m,(0,s.Wm)(e)])])],64)}}}}]);