(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[9019],{9345:(e,t,l)=>{"use strict";l.r(t),l.d(t,{data:()=>r});const r={key:"v-d4f7112c",path:"/typescript/%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E6%93%8D%E4%BD%9C%E7%AC%A6.html",title:"一些特殊运算符",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"!!variable",slug:"variable",children:[]},{level:2,title:"obj！",slug:"obj",children:[]},{level:2,title:"属性?:value",slug:"属性-value",children:[]},{level:2,title:"对象?.",slug:"对象",children:[]},{level:2,title:"+变量",slug:"变量",children:[]},{level:2,title:"??Nullish Coalescing空值合并",slug:"nullish-coalescing空值合并",children:[]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"typescript/一些特殊操作符.md",git:{updatedTime:1624500867e3,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},6674:(e,t,l)=>{"use strict";l.r(t),l.d(t,{default:()=>V});var r=l(6252);const n=(0,r.Wm)("h1",{id:"一些特殊运算符"},[(0,r.Wm)("a",{class:"header-anchor",href:"#一些特殊运算符"},"#"),(0,r.Uk)(" 一些特殊运算符")],-1),a=(0,r.Wm)("h2",{id:"variable"},[(0,r.Wm)("a",{class:"header-anchor",href:"#variable"},"#"),(0,r.Uk)(" !!variable")],-1),o=(0,r.Wm)("p",null,"javascript语法; 取两次反操作，目的：获取真实的true或false值",-1),d=(0,r.Wm)("p",null,"其实就是对falsy值(null,undefined,0,false,'')取两次反，最终得到一个boolean值",-1),c={href:"https://stackoverflow.com/questions/784929/what-is-the-not-not-operator-in-javascript",target:"_blank",rel:"noopener noreferrer"},s=(0,r.Uk)("What is the !! (not not) operator in JavaScript?"),i=(0,r.Wm)("h2",{id:"obj"},[(0,r.Wm)("a",{class:"header-anchor",href:"#obj"},"#"),(0,r.Uk)(" obj！")],-1),u=(0,r.Wm)("p",null,"typescript中语法；告知编译器，变量obj不要做类型推断为'null'和undefined的检查",-1),h=(0,r.Wm)("p",null,"用于，开发者明确知道变量obj不会为null或undefined，让ts类型推断不要去做空值检查了",-1),p={href:"https://stackoverflow.com/questions/42273853/in-typescript-what-is-the-exclamation-mark-bang-operator-when-dereferenci",target:"_blank",rel:"noopener noreferrer"},m=(0,r.Uk)("In Typescript, what is the ! (exclamation mark / bang) operator when dereferencing a member?"),W=(0,r.Wm)("h2",{id:"属性-value"},[(0,r.Wm)("a",{class:"header-anchor",href:"#属性-value"},"#"),(0,r.Uk)(" 属性?:value")],-1),f=(0,r.Wm)("p",null,"typescript中语法；表示参数可选",-1),b=(0,r.Wm)("p",null,[(0,r.Uk)("JavaScript里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是undefined。 在TypeScript里我们可以在参数名旁使用 "),(0,r.Wm)("code",null,"?"),(0,r.Uk)("实现可选参数的功能")],-1),k={href:"https://www.tslang.cn/docs/handbook/functions.html",target:"_blank",rel:"noopener noreferrer"},g=(0,r.Uk)("https://www.tslang.cn/docs/handbook/functions.html"),v=(0,r.Wm)("h2",{id:"对象"},[(0,r.Wm)("a",{class:"header-anchor",href:"#对象"},"#"),(0,r.Uk)(" 对象?.")],-1),U=(0,r.Wm)("p",null,"javascript语法；可选链",-1),y=(0,r.Wm)("strong",null,"可选链",-1),j=(0,r.Uk)("操作符( "),w=(0,r.Wm)("strong",null,[(0,r.Wm)("code",null,"?.")],-1),_=(0,r.Uk)(" )允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。"),E=(0,r.Wm)("code",null,"?.",-1),C=(0,r.Uk)(" 操作符的功能类似于 "),z=(0,r.Wm)("code",null,".",-1),S=(0,r.Uk)(" 链式操作符，不同之处在于，在引用为空("),q={href:"https://wiki.developer.mozilla.org/en-US/docs/Glossary/nullish",target:"_blank",rel:"noopener noreferrer"},N=(0,r.Uk)("nullish"),A=(0,r.Uk)(" ) ("),B={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null",target:"_blank",rel:"noopener noreferrer"},J=(0,r.Wm)("code",null,"null",-1),O=(0,r.Uk)(" 或者 "),R={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined",target:"_blank",rel:"noopener noreferrer"},T=(0,r.Wm)("code",null,"undefined",-1),x=(0,r.Uk)(") 的情况下不会引起错误，该表达式短路返回值是 "),D=(0,r.Wm)("code",null,"undefined",-1),G=(0,r.Uk)("。与函数调用一起使用时，如果给定的函数不存在，则返回 "),I=(0,r.Wm)("code",null,"undefined",-1),F={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E5%8F%AF%E9%80%89%E9%93%BE",target:"_blank",rel:"noopener noreferrer"},H=(0,r.Uk)("mdn-可选链"),L=(0,r.Wm)("h2",{id:"变量"},[(0,r.Wm)("a",{class:"header-anchor",href:"#变量"},"#"),(0,r.Uk)(" +变量")],-1),P=(0,r.Wm)("p",null,[(0,r.Uk)("javascript语法； 把变量转化成"),(0,r.Wm)("code",null,"number")],-1),Y=(0,r.Wm)("p",null,[(0,r.Uk)("The unary plus operator ("),(0,r.Wm)("code",null,"+"),(0,r.Uk)(") precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn't already")],-1),K={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Unary_plus",target:"_blank",rel:"noopener noreferrer"},M=(0,r.Uk)("Unary_plus"),Q=(0,r.uE)('<h2 id="nullish-coalescing空值合并"><a class="header-anchor" href="#nullish-coalescing空值合并">#</a> ??Nullish Coalescing空值合并</h2><p>使用<code>??</code>符，实现<code>null</code>和<code>undefined</code>的合并</p><h2 id="总结"><a class="header-anchor" href="#总结">#</a> 总结</h2><table><thead><tr><th>语法</th><th>适用</th><th>示例</th></tr></thead><tbody><tr><td><code>!!variable</code> 取布尔值</td><td>javascript</td><td>!!undefined !!<em>obj</em>[prop]</td></tr><tr><td><code>obj!</code> 不做空值类型推断</td><td><strong>typescript</strong></td><td>parent.querySelector(&#39;h1&#39;)!.textContent = this.name</td></tr><tr><td><code>key?:value</code> 可选参数</td><td><strong>typescript</strong></td><td>class TagInfo {name?: string}</td></tr><tr><td><code>obj?.</code> 可选链</td><td>javascript</td><td>console.log(fetchData?.jobInfo?.config?.type)</td></tr><tr><td><code>+varaible</code> 转换为number类型</td><td>javascript</td><td>console.log(+false)</td></tr><tr><td><code>??</code>实现<code>null</code>和<code>undefined</code>的合并</td><td><strong>typescript</strong></td><td>const a = &#39;&#39;; const result = a ?? &#39;lastdata&#39;</td></tr></tbody></table>',4),V={render:function(e,t){const l=(0,r.up)("OutboundLink");return(0,r.wg)(),(0,r.j4)(r.HY,null,[n,a,o,(0,r.Wm)("blockquote",null,[d,(0,r.Wm)("p",null,[(0,r.Wm)("a",c,[s,(0,r.Wm)(l)])])]),i,u,(0,r.Wm)("blockquote",null,[h,(0,r.Wm)("p",null,[(0,r.Wm)("a",p,[m,(0,r.Wm)(l)])])]),W,f,(0,r.Wm)("blockquote",null,[b,(0,r.Wm)("p",null,[(0,r.Wm)("a",k,[g,(0,r.Wm)(l)])])]),v,U,(0,r.Wm)("blockquote",null,[(0,r.Wm)("p",null,[y,j,w,_,E,C,z,S,(0,r.Wm)("a",q,[N,(0,r.Wm)(l)]),A,(0,r.Wm)("a",B,[J,(0,r.Wm)(l)]),O,(0,r.Wm)("a",R,[T,(0,r.Wm)(l)]),x,D,G,I]),(0,r.Wm)("p",null,[(0,r.Wm)("a",F,[H,(0,r.Wm)(l)])])]),L,P,(0,r.Wm)("blockquote",null,[Y,(0,r.Wm)("p",null,[(0,r.Wm)("a",K,[M,(0,r.Wm)(l)])])]),Q],64)}}}}]);