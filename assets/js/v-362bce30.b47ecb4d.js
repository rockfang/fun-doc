(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[9843],{8805:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-362bce30",path:"/typescript/TypeScript-%E8%A3%85%E9%A5%B0%E5%99%A8(Decorator).html",title:"TypeScript-装饰器(Decorator)",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"类装饰器",slug:"类装饰器",children:[]},{level:2,title:"装饰器工厂模式",slug:"装饰器工厂模式",children:[]},{level:2,title:"装饰器组合",slug:"装饰器组合",children:[]},{level:2,title:"属性装饰器",slug:"属性装饰器",children:[]},{level:2,title:"访问器装饰器 | 方法装饰器 | 属性装饰器",slug:"访问器装饰器-方法装饰器-属性装饰器",children:[]},{level:2,title:"装饰器中返回Class",slug:"装饰器中返回class",children:[]},{level:2,title:"Decorator示例",slug:"decorator示例",children:[{level:3,title:"使用decorator实现方法bind",slug:"使用decorator实现方法bind",children:[]},{level:3,title:"使用装饰器实现表单校验",slug:"使用装饰器实现表单校验",children:[]},{level:3,title:"第三方库",slug:"第三方库",children:[]}]},{level:2,title:"装饰器思想的应用",slug:"装饰器思想的应用",children:[]}],filePathRelative:"typescript/TypeScript-装饰器(Decorator).md",git:{updatedTime:1624500867e3,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},8033:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>q});var p=a(6252);const t=(0,p.uE)('<h1 id="typescript-装饰器-decorator"><a class="header-anchor" href="#typescript-装饰器-decorator">#</a> TypeScript-装饰器(Decorator)</h1><p><code>tsconfig.json</code>配置</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es6&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">/* Enables experimental support for ES7 decorators. */</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="类装饰器"><a class="header-anchor" href="#类装饰器">#</a> 类装饰器</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>\n<span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;logging&#39;</span><span class="token punctuation">)</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n@logger\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token builtin">string</span>\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">in constructor name </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;fun&#39;</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p><strong>装饰器</strong></p><p>参数多少由何处使用装饰器决定 使用在类上的装饰器,参数为构造函数</p></blockquote><h2 id="装饰器工厂模式"><a class="header-anchor" href="#装饰器工厂模式">#</a> 装饰器工厂模式</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span>logstr<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>logstr<span class="token punctuation">)</span>\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n@<span class="token function">logger</span><span class="token punctuation">(</span><span class="token string">&#39;logging&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token builtin">string</span>\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">in constructor name </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;fun&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>装饰器返回函数封装装饰器工厂</p><p>使用装饰器时，是函数调用方式使用。可以传参。</p></blockquote><p>利用装饰器做页面渲染：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">withTemplate</span><span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> container<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>\n        <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">constructor</span></span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            parent<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> template\n            parent<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> p<span class="token punctuation">.</span>name\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n@<span class="token function">withTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1 style=&#39;color:red&#39;&gt;hello&lt;/h1&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;default&#39;</span>\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">in constructor name </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;fun&#39;</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p>通过装饰器方式找到页面容器并渲染内容。这在angular等框架中用到类似idea</p></blockquote><h2 id="装饰器组合"><a class="header-anchor" href="#装饰器组合">#</a> 装饰器组合</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>\n<span class="token keyword">function</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">withTemplate</span><span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> container<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword">constructor</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>\n        <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token keyword">constructor</span></span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            parent<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> template\n            parent<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> p<span class="token punctuation">.</span>name\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n@<span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n@<span class="token function">withTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1 style=&#39;color:red&#39;&gt;hello&lt;/h1&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;default&#39;</span>\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n\t\t<span class="token comment">// console.log(`in constructor name ${name}`)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;fun&#39;</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><blockquote><p>由上至下依次对装饰器表达式求值。</p><p>求值的结果会被当作函数，由下至上依次调用。</p><p>示例打印结果顺序为：1 2 3 4</p></blockquote><h2 id="属性装饰器"><a class="header-anchor" href="#属性装饰器">#</a> 属性装饰器</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Symbol<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyName<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>\n\t@log\n\ttitle<span class="token operator">:</span> <span class="token builtin">string</span>\n\t_price<span class="token operator">:</span> <span class="token builtin">number</span>\n\n\t<span class="token keyword">set</span> <span class="token function">price</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>_price <span class="token operator">=</span> val\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;invalid price setting!&#39;</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span>t<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> t\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>_price <span class="token operator">=</span> p\n\t<span class="token punctuation">}</span>\n\n\t<span class="token function">getPriceWithTax</span><span class="token punctuation">(</span>tax<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_price <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> tax<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token string">&#39;phone&#39;</span><span class="token punctuation">,</span><span class="token number">235</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><blockquote><p><strong>属性装饰器参数</strong></p><p>第一个参数：对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</p><p>第二个参数：成员的名字。</p></blockquote><h2 id="访问器装饰器-方法装饰器-属性装饰器"><a class="header-anchor" href="#访问器装饰器-方法装饰器-属性装饰器">#</a> 访问器装饰器 | 方法装饰器 | 属性装饰器</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">log</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> Symbol<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyName<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">log2</span><span class="token punctuation">(</span>\n\ttarget<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n\tpropertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n\tdescriptor<span class="token operator">:</span> PropertyDescriptor\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;访问器 decorator&#39;</span><span class="token punctuation">)</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyName<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">log3</span><span class="token punctuation">(</span>\n\ttarget<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n\tpropertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n\tdescriptor<span class="token operator">:</span> PropertyDescriptor\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Method decorator&#39;</span><span class="token punctuation">)</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyName<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">log4</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propertyName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> position<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Parameter decorator&#39;</span><span class="token punctuation">)</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> propertyName<span class="token punctuation">,</span> position<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>\n\t@log\n\ttitle<span class="token operator">:</span> <span class="token builtin">string</span>\n\t_price<span class="token operator">:</span> <span class="token builtin">number</span>\n\n\t@log2\n\t<span class="token keyword">set</span> <span class="token function">price</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>_price <span class="token operator">=</span> val\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;invalid price setting!&#39;</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span>t<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> t\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>_price <span class="token operator">=</span> p\n\t<span class="token punctuation">}</span>\n\t@log3\n\t<span class="token function">getPriceWithTax</span><span class="token punctuation">(</span>tax<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_price <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> tax<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><blockquote><p>装饰器在类定义的时候就会执行装饰器函数了</p><p>方法装饰器声明在一个方法的声明之前（紧靠着方法声明）。 它会被应用到方法的 <em>属性描述符</em>上，可以用来监视，修改或者替换方法定义</p></blockquote><h2 id="装饰器中返回class"><a class="header-anchor" href="#装饰器中返回class">#</a> 装饰器中返回Class</h2><p>处理在类实例化时才调用装饰器的方法，可以通过在装饰器中返回class的方式实现：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">withTemplate</span><span class="token punctuation">(</span>template<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> container<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n\t\t<span class="token keyword">constructor</span><span class="token operator">:</span> <span class="token constant">T</span>\n\t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">extends</span></span> <span class="token keyword">constructor</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n\t\t\t\t<span class="token keyword">const</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>\n\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\tparent<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> template\n\t\t\t\t\tparent<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n@<span class="token function">withTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1 style=&#39;color:red&#39;&gt;hello&lt;/h1&gt;&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;default&#39;</span>\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;fun&#39;</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>未实例化时，页面上的<code>h1</code>标签时不存在的，实例化才会出现。</p><h2 id="decorator示例"><a class="header-anchor" href="#decorator示例">#</a> Decorator示例</h2><h3 id="使用decorator实现方法bind"><a class="header-anchor" href="#使用decorator实现方法bind">#</a> 使用decorator实现方法bind</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token punctuation">{</span>\n\tmessage <span class="token operator">=</span> <span class="token string">&#39;Go Go Go&#39;</span>\n\t<span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> printer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> clickButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>\nclickButton<span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> printer<span class="token punctuation">.</span>showMessage<span class="token punctuation">)</span> <span class="token comment">//undefined 因为this指向事件本身了</span>\nclickButton<span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> printer<span class="token punctuation">.</span><span class="token function">showMessage</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>printer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//GO GO GO</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>上面代码，由于在<code>addEventListener</code>回调方法中调用<code>this</code>，<code>this</code>指向变化，导致直接调用方法达不到预期效果。常规方式需手动 <code>method.bind(obj)</code>方式达到预期效果。</p><p>采用<code>方法装饰器</code>实现该功能：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//function decorator参数形式</span>\n<span class="token keyword">function</span> <span class="token function">autoBind</span><span class="token punctuation">(</span>\n\ttarget<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>\n\tmethodName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n\tdescriptor<span class="token operator">:</span> PropertyDescriptor\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> originalMethod <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value\n\t<span class="token keyword">const</span> adjDescriptor<span class="token operator">:</span> PropertyDescriptor <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\tconfigurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t\tenumerable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n\t\t<span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">const</span> boundFn <span class="token operator">=</span> <span class="token function">originalMethod</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">//this只想get方法的调用者(对象.属性),即对象本身</span>\n\t\t\t<span class="token keyword">return</span> boundFn\n\t\t<span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> adjDescriptor\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token punctuation">{</span>\n\tmessage <span class="token operator">=</span> <span class="token string">&#39;Go Go Go&#39;</span>\n\n\t@autoBind\n\t<span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> printer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> clickButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;button&#39;</span><span class="token punctuation">)</span>\nclickButton<span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> printer<span class="token punctuation">.</span>showMessage<span class="token punctuation">)</span> <span class="token comment">// GO GO GO</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',31),e=(0,p.Wm)("p",null,[(0,p.Wm)("strong",null,"要点")],-1),o=(0,p.Wm)("p",null,"方法装饰器的参数为 target methodName descriptor",-1),c=(0,p.Uk)("理解"),l={href:"https://www.icaifun.com/article/5dfc91e679ab7b629881ef1e",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("PropertyDescriptor"),r=(0,p.Wm)("p",null,"利用PropertyDescriptor 重写get方法，在其中绑定方法到this上",-1),i=(0,p.uE)('<h3 id="使用装饰器实现表单校验"><a class="header-anchor" href="#使用装饰器实现表单校验">#</a> 使用装饰器实现表单校验</h3><p>一个普通的表单数据提交功能</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token punctuation">{</span>\n\ttitle<span class="token operator">:</span> <span class="token builtin">string</span>\n\tprice<span class="token operator">:</span> <span class="token builtin">number</span>\n\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span>t<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> t\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> p\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#submit-course&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> titleDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#title&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLInputElement\n\t<span class="token keyword">const</span> priceDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#price&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLInputElement\n\n\t<span class="token keyword">const</span> course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>titleDom<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token operator">+</span>priceDom<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',3),k=(0,p.Uk)("写装饰器之前，可以先看下 "),b={href:"https://jkchao.github.io/typescript-book-chinese/typings/indexSignatures.html#typescript-%E7%B4%A2%E5%BC%95%E7%AD%BE%E5%90%8D",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("TypeScript索引签名使用"),d=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//构建这样一种数据结构描述validate信息</span>\n<span class="token comment">//结构为： constructor.name : {propName: [&#39;required&#39;,&#39;positive&#39;,...]}</span>\n<span class="token keyword">interface</span> <span class="token class-name">ValidatorConfig</span> <span class="token punctuation">{</span>\n\t<span class="token punctuation">[</span>property<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\t\t<span class="token punctuation">[</span>validatableProp<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//[&#39;required&#39;,&#39;positive&#39;]</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> registeredValidators<span class="token operator">:</span> ValidatorConfig <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">required</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tregisteredValidators<span class="token punctuation">[</span>target<span class="token punctuation">.</span><span class="token keyword">constructor</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t<span class="token operator">...</span>registeredValidators<span class="token punctuation">[</span>target<span class="token punctuation">.</span><span class="token keyword">constructor</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;required&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">positiveNumber</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\tregisteredValidators<span class="token punctuation">[</span>target<span class="token punctuation">.</span><span class="token keyword">constructor</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t<span class="token operator">...</span>registeredValidators<span class="token punctuation">[</span>target<span class="token punctuation">.</span><span class="token keyword">constructor</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;positive&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;positiveNumber &#39;</span> <span class="token operator">+</span> propName<span class="token punctuation">,</span>registeredValidators<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//校验指定对象的属性</span>\n<span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// 拿到该类(通过构造方法名)的 校验信息</span>\n    <span class="token keyword">const</span> objValidatorConfig <span class="token operator">=</span> registeredValidators<span class="token punctuation">[</span>obj<span class="token punctuation">.</span><span class="token keyword">constructor</span><span class="token punctuation">.</span>name<span class="token punctuation">]</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>objValidatorConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">true</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">let</span> isValid <span class="token operator">=</span> <span class="token boolean">true</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">in</span> objValidatorConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> validator <span class="token keyword">of</span> objValidatorConfig<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">switch</span> <span class="token punctuation">(</span>validator<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;required&#39;</span><span class="token operator">:</span>\n\t\t\t\t\tisValid <span class="token operator">=</span> isValid <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token comment">//判断该属性是否存在</span>\n\t\t\t\t\t<span class="token keyword">break</span>\n\t\t\t\t<span class="token keyword">case</span> <span class="token string">&#39;positive&#39;</span><span class="token operator">:</span>\n\t\t\t\t\tisValid <span class="token operator">=</span> isValid <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> isValid\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token punctuation">{</span>\n\n\t@required\n    title<span class="token operator">:</span> <span class="token builtin">string</span>\n    \n\t@positiveNumber\n\tprice<span class="token operator">:</span> <span class="token builtin">number</span>\n\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span>t<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> t\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> p\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#submit-course&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> titleDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#title&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLInputElement\n\t<span class="token keyword">const</span> priceDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#price&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLInputElement\n\n    <span class="token keyword">const</span> course <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span>titleDom<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token operator">+</span>priceDom<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">validate</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Not valid!!&#39;</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">return</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br></div></div><blockquote><p><strong>说明</strong></p><p>构建这样一种数据结构描述validate信息。结构为： {constructor.name : {propName: [&#39;required&#39;,&#39;positive&#39;,...]}}</p><p>校验时遍历该数据结构，验证结果是否符合预期</p><p>实际情况这些校验功能模块第三方插件提供，我们依赖使用即可</p></blockquote><h3 id="第三方库"><a class="header-anchor" href="#第三方库">#</a> 第三方库</h3>',3),g={href:"https://github.com/typestack/class-validator",target:"_blank",rel:"noopener noreferrer"},y=(0,p.Uk)("class-validator"),w=(0,p.Wm)("h2",{id:"装饰器思想的应用"},[(0,p.Wm)("a",{class:"header-anchor",href:"#装饰器思想的应用"},"#"),(0,p.Uk)(" 装饰器思想的应用")],-1),f={href:"https://angular.io/guide/component-styles",target:"_blank",rel:"noopener noreferrer"},h=(0,p.Uk)("Angular中使用"),v=(0,p.Wm)("p",null,"在nextjs和Java中都有大量使用",-1),q={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("blockquote",null,[e,o,(0,p.Wm)("p",null,[c,(0,p.Wm)("a",l,[u,(0,p.Wm)(a)])]),r]),i,(0,p.Wm)("p",null,[k,(0,p.Wm)("a",b,[m,(0,p.Wm)(a)])]),d,(0,p.Wm)("p",null,[(0,p.Wm)("a",g,[y,(0,p.Wm)(a)])]),w,(0,p.Wm)("p",null,[(0,p.Wm)("a",f,[h,(0,p.Wm)(a)])]),v],64)}}}}]);