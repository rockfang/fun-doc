(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[513],{6316:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-6ada3d40",path:"/interview/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98-EVAL%E5%87%BD%E6%95%B0.html",title:"前端面试问题-EVAL函数",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"EVAL在REQUIREJS中应用",slug:"eval在requirejs中应用",children:[]},{level:2,title:"EVAL在定时器中的应用",slug:"eval在定时器中的应用",children:[]},{level:2,title:"严格模式下EVAL的作用域",slug:"严格模式下eval的作用域",children:[]}],filePathRelative:"interview/前端/前端面试问题-EVAL函数.md",git:{updatedTime:162452411e4,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},4983:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="前端面试问题-eval函数"><a class="header-anchor" href="#前端面试问题-eval函数">#</a> 前端面试问题-EVAL函数</h1><p><code>eval</code>函数就是一个代码解析器，把字符串解析成代码运行。</p><p>示例1</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">eval</span><span class="token punctuation">(</span>’<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>将会弹框显示数字3。</p><p>eval使得js高度灵活，如，可以让用户输入代码，页面执行。使得页面代码动态化</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>’ta’</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”btn”</span><span class="token punctuation">&gt;</span></span>执行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>’btn’<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> code <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>’ta’<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n      <span class="token function">eval</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>当然这会引起安全问题，所谓的<code>xss</code>攻击。此例也说明了eval的强大。</p><h2 id="eval在requirejs中应用"><a class="header-anchor" href="#eval在requirejs中应用">#</a> EVAL在REQUIREJS中应用</h2><p>在requireJs（AMD模块化规范的代表）中，就是利用强大的eval实现。 如异步加载三个模块：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span>”jquery”<span class="token punctuation">,</span>”moduleA”<span class="token punctuation">,</span>”moduleB”<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>eval(’任意内容’);</strong></p><p>其原理是:</p><ul><li>通过指定type为文本方式引入js文件，<code>&lt;script src=”xxx.js” type=”text/html”&gt;&lt;/script&gt;</code></li><li>再通过eval(text)执行内容，实现异步加载的效果</li></ul><h2 id="eval在定时器中的应用"><a class="header-anchor" href="#eval在定时器中的应用">#</a> EVAL在定时器中的应用</h2><p>可以把定时器中的函数写成字符串代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">’alert</span><span class="token punctuation">(</span><span class="token number">555</span><span class="token punctuation">)</span>’<span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token comment">//会像正常函数一样执行alert(555)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>代码正常执行，定时器内部就是通过eval(text)方式处理的</p><h2 id="严格模式下eval的作用域"><a class="header-anchor" href="#严格模式下eval的作用域">#</a> 严格模式下EVAL的作用域</h2><p>默认情况：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">eval</span><span class="token punctuation">(</span>’<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token comment">//等价于var a = 20</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印20。 因为eval中重新定义了a为20</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>加上严格模式：use strict</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>’use strict’\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">eval</span><span class="token punctuation">(</span>’<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印3。 因为严格模式下，eval中定义的a只在eval作用域中有效</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>由此可见：use strict严格模式下，可限定eval中变量作用域，避免污染外部变量。</p></blockquote>',24),t={render:function(n,s){return p}}}}]);