(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[1539],{9900:(n,a,s)=>{"use strict";s.r(a),s.d(a,{data:()=>p});const p={key:"v-efea4326",path:"/android/ANDROID-UI%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B.html",title:"ANDROID-UI绘制流程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"VIEW如何添加到屏幕窗口上",slug:"view如何添加到屏幕窗口上",children:[]},{level:2,title:"VIEW的绘制流程",slug:"view的绘制流程",children:[]}],filePathRelative:"android/ANDROID-UI绘制流程.md",git:{updatedTime:162452411e4,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},8069:(n,a,s)=>{"use strict";s.r(a),s.d(a,{default:()=>t});const p=(0,s(6252).uE)('<h1 id="android-ui绘制流程"><a class="header-anchor" href="#android-ui绘制流程">#</a> ANDROID-UI绘制流程</h1><h2 id="view如何添加到屏幕窗口上"><a class="header-anchor" href="#view如何添加到屏幕窗口上">#</a> VIEW如何添加到屏幕窗口上</h2><p><img src="https://api.icaifun.com/articleImages/1587829249273.png" alt=""></p><p>追溯源码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>setContentView把我们的布局文件加载到Activity中显示。内部是如何实现的呢，追踪setContentView源码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@LayoutRes</span> <span class="token keyword">int</span> layoutResID<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContentView</span><span class="token punctuation">(</span>layoutResID<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">initWindowDecorActionBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>关键代码<code>getWindow().setContentView(layoutResID)</code>; 首先，我们先查看getWindow()是啥，再去找它的setContentView方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Window</span> <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> mWindow<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>返回的是一个Window对象，查看Window源码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n\n * Abstract base class for a top-level window look and behavior policy.  An\n\n * instance of this class should be used as the top-level view added to the\n\n * window manager. It provides standard UI policies such as a background, title\n\n * area, default key processing, etc.\n   *\n\n * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The only existing implementation of this abstract class is\n\n * android.view.PhoneWindow, which you should instantiate when needing a\n\n * Window.\n   */</span>\n   <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n   <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>注释上看到这是添加到windw manager上的顶层view,唯一实现类是<code>PhoneWindow</code> double Shift 搜索PhoneWindow类查看，找到setContentView方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//PhoneWindwow.java</span>\n<span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentView</span><span class="token punctuation">(</span><span class="token keyword">int</span> layoutResID<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span>\n    <span class="token comment">// decor, when theme attributes and the like are crystalized. Do not check the feature</span>\n    <span class="token comment">// before this happens.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>mContentParent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">installDecor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasFeature</span><span class="token punctuation">(</span>FEATURE_CONTENT_TRANSITIONS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        mContentParent<span class="token punctuation">.</span><span class="token function">removeAllViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasFeature</span><span class="token punctuation">(</span>FEATURE_CONTENT_TRANSITIONS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">final</span> <span class="token class-name">Scene</span> newScene <span class="token operator">=</span> <span class="token class-name">Scene</span><span class="token punctuation">.</span><span class="token function">getSceneForLayout</span><span class="token punctuation">(</span>mContentParent<span class="token punctuation">,</span> layoutResID<span class="token punctuation">,</span>\n                <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">transitionTo</span><span class="token punctuation">(</span>newScene<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        mLayoutInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>layoutResID<span class="token punctuation">,</span> mContentParent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    mContentParent<span class="token punctuation">.</span><span class="token function">requestApplyInsets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> <span class="token class-name">Callback</span> cb <span class="token operator">=</span> <span class="token function">getCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cb<span class="token punctuation">.</span><span class="token function">onContentChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    mContentParentExplicitlySet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>关注<code>installDecor()</code>和<code>mLayoutInflater.inflate(layoutResID, mContentParent);</code>,分别对象创建deocor和把布局填充到mContentParent.</p><p>追踪installDecor方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>mDecor <span class="token operator">=</span> <span class="token function">generateDecor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nmContentParent <span class="token operator">=</span> <span class="token function">generateLayout</span><span class="token punctuation">(</span>mDecor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其中做了两件事：生成decor和用decor生成mContentParent。 查看generateDecor方法能看到：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DecorView</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> featureId<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>即生成了一个DecorView.</p><p>查看generateLayout(mDecor);方法简化能看到：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>layoutResource <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>screen_simple<span class="token punctuation">;</span>\nmDecor<span class="token punctuation">.</span><span class="token function">onResourcesLoaded</span><span class="token punctuation">(</span>mLayoutInflater<span class="token punctuation">,</span> layoutResource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ViewGroup</span> contentParent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ViewGroup</span><span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>ID_ANDROID_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//com.android.internal.R.id.content</span>\n<span class="token keyword">return</span> contentParent<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其中：</p><ul><li>layoutResource是根据本地配置，加载不同的默认系统布局（根据features是否有需要actionbar，是否有标题啥的）</li><li>mDecor.onResourcesLoaded(mLayoutInflater, layoutResource)中把上面的顶层布局加载到DecorView中</li><li>contentParent = (ViewGroup)findViewById(ID_ANDROID_CONTENT)这儿是找到id为com.android.internal.R.id.content为这个的布局资源返回。这个对应正是 R.layout.screen_simple布局中内容id.(可以打开该布局文件查看到)</li></ul><p><code>R.layout.screen_simple</code>:</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”http://schemas.android.com/apk/res/android”</span>\n    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”match_parent”</span>\n    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”match_parent”</span>\n    <span class="token attr-name"><span class="token namespace">android:</span>fitsSystemWindows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”true”</span>\n    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”vertical”</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ViewStub</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”@+id/action_mode_bar_stub”</span>\n              <span class="token attr-name"><span class="token namespace">android:</span>inflatedId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”@+id/action_mode_bar”</span>\n              <span class="token attr-name"><span class="token namespace">android:</span>layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”@layout/action_mode_bar”</span>\n              <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”match_parent”</span>\n              <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”wrap_content”</span>\n              <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”?attr/actionBarTheme”</span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FrameLayout</span>\n         <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”@android:id/content”</span>\n         <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”match_parent”</span>\n         <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”match_parent”</span>\n         <span class="token attr-name"><span class="token namespace">android:</span>foregroundInsidePadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”false”</span>\n         <span class="token attr-name"><span class="token namespace">android:</span>foregroundGravity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”fill_horizontal|top”</span>\n         <span class="token attr-name"><span class="token namespace">android:</span>foreground</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”?android:attr/windowContentOverlay”</span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>即PhoneWindow中setContentView做了这几件事：</p><ul><li>生成DecorView</li><li>通过读取主题特性，用DecorView加载一个系统中的顶层布局文件文件</li><li>返回布局中content这个FrameLayout组件</li><li>把ContentView添加到这个FrameLayout中</li></ul><p><img src="https://api.icaifun.com/articleImages/1587829707408.png" alt=""></p><h2 id="view的绘制流程"><a class="header-anchor" href="#view的绘制流程">#</a> VIEW的绘制流程</h2><p>流程图：<img src="https://api.icaifun.com/articleImages/1587829977421.png" alt=""></p><p>源码追踪 找到入口类ActivityThread的handleResumeActivity方法： 关注到：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">View</span> decor <span class="token operator">=</span> r<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndecor<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">View</span><span class="token punctuation">.</span>INVISIBLE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ViewManager</span> wm <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getWindowManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span> l <span class="token operator">=</span> r<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nwm<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>decor<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>其就是把decor添加到windowmanager中。</p><p>追踪getWindowManager方法，我们能找到，其获取的对象是在Window.java的setWindowManager中设置的。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWindowManager</span><span class="token punctuation">(</span><span class="token class-name">WindowManager</span> wm<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> appToken<span class="token punctuation">,</span> <span class="token class-name">String</span> appName<span class="token punctuation">,</span>\n        <span class="token keyword">boolean</span> hardwareAccelerated<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    mAppToken <span class="token operator">=</span> appToken<span class="token punctuation">;</span>\n    mAppName <span class="token operator">=</span> appName<span class="token punctuation">;</span>\n    mHardwareAccelerated <span class="token operator">=</span> hardwareAccelerated\n            <span class="token operator">||</span> <span class="token class-name">SystemProperties</span><span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span>PROPERTY_HARDWARE_UI<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>wm <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        wm <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">WindowManager</span><span class="token punctuation">)</span>mContext<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span>WINDOW_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    mWindowManager <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">WindowManagerImpl</span><span class="token punctuation">)</span>wm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createLocalWindowManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>追踪WindowManagerImpl.java类找到addView方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WindowManagerGlobal</span> mGlobal <span class="token operator">=</span> <span class="token class-name">WindowManagerGlobal</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">ViewGroup<span class="token punctuation">.</span>LayoutParams</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">applyDefaultToken</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    mGlobal<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> params<span class="token punctuation">,</span> mContext<span class="token punctuation">.</span><span class="token function">getDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mParentWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>继续找WindowManagerGlobal类中的addView方法： 关注到：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addView</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token class-name">ViewGroup<span class="token punctuation">.</span>LayoutParams</span> params<span class="token punctuation">,</span>\n        <span class="token class-name">Display</span> display<span class="token punctuation">,</span> <span class="token class-name">Window</span> parentWindow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token class-name">ViewRootImpl</span> root<span class="token punctuation">;</span>\n\t<span class="token class-name">View</span> panelParentView <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViewRootImpl</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> display<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n        view<span class="token punctuation">.</span><span class="token function">setLayoutParams</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n        mViews<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mRoots<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mParams<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wparams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    root<span class="token punctuation">.</span><span class="token function">setView</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> wparams<span class="token punctuation">,</span> panelParentView<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>即其创建了一个ViewRootImpl实例，把我们的view,params,parentView做了一个关联。</p><p>继续追踪ViewRootImpl中setView方法： 代码丛中我们找到了：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查看里面逻辑：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mHandlingLayoutInLayoutRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">checkThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mLayoutRequested <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token function">scheduleTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>继续追踪scheduleTraversals方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">scheduleTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mTraversalScheduled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        mTraversalScheduled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        mTraversalBarrier <span class="token operator">=</span> mHandler<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postSyncBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mChoreographer<span class="token punctuation">.</span><span class="token function">postCallback</span><span class="token punctuation">(</span>\n                <span class="token class-name">Choreographer</span><span class="token punctuation">.</span>CALLBACK_TRAVERSAL<span class="token punctuation">,</span> mTraversalRunnable<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mUnbufferedInputDispatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">scheduleConsumeBatchedInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">notifyRendererOfFramePending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">pokeDrawLockIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>关注到其中mTraversalRunnable是一个Runnable对象，即一个线程。 追踪TraversalRunnable类中run方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TraversalRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">doTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>追踪doTraversal()</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">doTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>mTraversalScheduled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        mTraversalScheduled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        mHandler<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeSyncBarrier</span><span class="token punctuation">(</span>mTraversalBarrier<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>mProfile<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Debug</span><span class="token punctuation">.</span><span class="token function">startMethodTracing</span><span class="token punctuation">(</span>”<span class="token class-name">ViewAncestor</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    \n        <span class="token function">performTraversals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n        <span class="token keyword">if</span> <span class="token punctuation">(</span>mProfile<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Debug</span><span class="token punctuation">.</span><span class="token function">stopMethodTracing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            mProfile <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>追踪performTraversals(),这个方法中内容特别多，但我们可以找到几个关键调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">performMeasure</span><span class="token punctuation">(</span>childWidthMeasureSpec<span class="token punctuation">,</span> childHeightMeasureSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">performLayout</span><span class="token punctuation">(</span>lp<span class="token punctuation">,</span> mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">performDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>即分别对应我们的测量-布局-绘制方法。</p>',53),t={render:function(n,a){return p}}}}]);