(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[1320],{3442:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-d034ffa6",path:"/typescript/TS%E4%B8%AD%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3.html",title:"TS中类和接口",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"展开运算符的使用",slug:"展开运算符的使用",children:[]},{level:2,title:"class",slug:"class",children:[]},{level:2,title:"interface",slug:"interface",children:[]}],filePathRelative:"typescript/TS中类和接口.md",git:{updatedTime:1625206688e3,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:2}]}}},936:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="ts中类和接口"><a class="header-anchor" href="#ts中类和接口">#</a> TS中类和接口</h1><p>先看一个普通函数的定义</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/**\n * 箭头函数\n * 箭头函数默认值;函数参数默认值须放最右参数位置\n * 函数结果作为参数\n */</span>\n\n<span class="token keyword">const</span> containStr <span class="token operator">=</span> <span class="token punctuation">(</span>src<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> dest<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> src<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>\n<span class="token comment">// console.log(containStr(&quot;abcd&quot;,&quot;abce&quot;));</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">printFunc</span><span class="token operator">:</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">void</span> <span class="token operator">=</span> output <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">printFunc</span><span class="token punctuation">(</span><span class="token function">containStr</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>其实可以通过interface定义函数。后面会有对应的写法。</p><h2 id="展开运算符的使用"><a class="header-anchor" href="#展开运算符的使用">#</a> 展开运算符的使用</h2><p><strong>数组展开</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 数组展开</span>\n<span class="token keyword">const</span> workday <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Mon&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Wed&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Thu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Fri&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> workMan <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Sat&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>workday<span class="token punctuation">]</span> <span class="token comment">//[&quot;Sat&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;]</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>workMan<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> <span class="token operator">...</span>remain<span class="token punctuation">]</span> <span class="token operator">=</span> workday\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> remain<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在函数中的应用</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 不限长度参数及reduce使用</span>\n<span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>numbers<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>\n  result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>curResult<span class="token punctuation">,</span> curValue<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> curResult <span class="token operator">+</span> curValue\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>对象展开</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">//  对象展开</span>\n<span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> name2<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> person\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name2<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token comment">// a 23</span>\n<span class="token keyword">const</span> cpMan <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>person<span class="token punctuation">,</span> school<span class="token operator">:</span> <span class="token string">&#39;nj&#39;</span> <span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cpMan<span class="token punctuation">)</span> <span class="token comment">//{name: &quot;a&quot;, age: 23, school: &quot;nj&quot;}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>剩余运算符</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">//1</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">//[2,3,4,5]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="class"><a class="header-anchor" href="#class">#</a> class</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">TagInfo</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token keyword">type</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  desc<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  updateType<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>\n\n  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name\n  <span class="token punctuation">}</span>\n  <span class="token function">logSelf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> TagInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,type </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">type</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,desc </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>desc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,updateType </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>updateType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> tag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TagInfo</span><span class="token punctuation">(</span><span class="token string">&#39;日活&#39;</span><span class="token punctuation">)</span>\ntag<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token string">&#39;统计&#39;</span>\ntag<span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token string">&#39;日活量统计结果展示&#39;</span>\ntag<span class="token punctuation">.</span>updateType <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token comment">// console.log(tag)</span>\ntag<span class="token punctuation">.</span><span class="token function">logSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> tagCopy <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> tag<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n  logSelf<span class="token operator">:</span> tag<span class="token punctuation">.</span>logSelf<span class="token punctuation">,</span>\n  desc<span class="token operator">:</span> tag<span class="token punctuation">.</span>desc<span class="token punctuation">,</span>\n  updateType<span class="token operator">:</span> tag<span class="token punctuation">.</span>updateType<span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\ntagCopy<span class="token punctuation">.</span><span class="token function">logSelf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p><strong>构造函数中指定参数的访问权限，可以不&quot;显式&quot;的定义成员变量。</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">TreeInfo</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> domainId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token keyword">public</span> treeJson<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">logTreeInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> TreeInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// this.domainId = 234 //无法分配到 &quot;domainId&quot; ，因为它是只读属性</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>treeJson <span class="token operator">=</span> <span class="token string">&#39;json is &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>treeJson\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">domainId </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>domainId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> treeJson </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeJson<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> ti <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeInfo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">&quot;jsonstring&quot;</span><span class="token punctuation">)</span>\nti<span class="token punctuation">.</span>treeJson <span class="token operator">=</span> <span class="token string">&quot;another json string&quot;</span>\n\nti<span class="token punctuation">.</span><span class="token function">logTreeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>定义继承类，get, set 方法</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">TreeInfo</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">protected</span> <span class="token keyword">readonly</span> domainId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token keyword">public</span> treeJson<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">logTreeInfo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> TreeInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// this.domainId = 234 //无法分配到 &quot;domainId&quot; ，因为它是只读属性</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>treeJson <span class="token operator">=</span> <span class="token string">&#39;json is &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>treeJson\n\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">domainId </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>domainId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> treeJson </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>treeJson<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> ti <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeInfo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">&quot;jsonstring&quot;</span><span class="token punctuation">)</span>\nti<span class="token punctuation">.</span>treeJson <span class="token operator">=</span> <span class="token string">&quot;another json string&quot;</span>\n\nti<span class="token punctuation">.</span><span class="token function">logTreeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SubTree</span> <span class="token keyword">extends</span> <span class="token class-name">TreeInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> parentId<span class="token operator">:</span> <span class="token builtin">number</span>\n    <span class="token keyword">constructor</span><span class="token punctuation">(</span>domainId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>treeJson<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>domainId<span class="token punctuation">,</span>treeJson<span class="token punctuation">)</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>parentId <span class="token operator">=</span> parentId\n    <span class="token punctuation">}</span>\n    <span class="token keyword">get</span> <span class="token function">idInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>domainId <span class="token operator">+</span> <span class="token string">&quot;---&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parentId\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">public</span> <span class="token keyword">set</span> <span class="token function">mPid</span><span class="token punctuation">(</span>v <span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>parentId <span class="token operator">=</span> v<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    \n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubTree</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&quot;sub tree json&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>\nst<span class="token punctuation">.</span>mPid <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>idInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p><strong>定义抽象类，抽象方法：</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TreeInfo</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">static</span> <span class="token constant">DOMAIN_SYS_ID</span> <span class="token operator">=</span> <span class="token number">1</span>\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">protected</span> <span class="token keyword">readonly</span> domainId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token keyword">public</span> treeJson<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\t<span class="token keyword">abstract</span> <span class="token function">logTreeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n\n\t<span class="token keyword">static</span> <span class="token function">createInfoObject</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> info<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">{</span> key<span class="token operator">:</span> id<span class="token punctuation">,</span> value<span class="token operator">:</span> info <span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">SubTree</span> <span class="token keyword">extends</span> <span class="token class-name">TreeInfo</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">private</span> parentId<span class="token operator">:</span> <span class="token builtin">number</span>\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span>domainId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> treeJson<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">super</span><span class="token punctuation">(</span>domainId<span class="token punctuation">,</span> treeJson<span class="token punctuation">)</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>parentId <span class="token operator">=</span> parentId\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">get</span> <span class="token function">idInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>domainId <span class="token operator">+</span> <span class="token string">&#39;---&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parentId\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">public</span> <span class="token keyword">set</span> <span class="token function">mPid</span><span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>parentId <span class="token operator">=</span> v\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">logTreeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subTree parentId </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubTree</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;sub tree json&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\nst<span class="token punctuation">.</span><span class="token function">logTreeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p><strong>单例模式：</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">SubTree</span> <span class="token keyword">extends</span> <span class="token class-name">TreeInfo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> parentId<span class="token operator">:</span> <span class="token builtin">number</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> instance<span class="token operator">:</span> SubTree\n\t<span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>domainId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> treeJson<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> parentId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">super</span><span class="token punctuation">(</span>domainId<span class="token punctuation">,</span> treeJson<span class="token punctuation">)</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>parentId <span class="token operator">=</span> parentId\n    <span class="token punctuation">}</span>\n    <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>SubTree<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubTree</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;singleton treejson&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance\n    <span class="token punctuation">}</span>\n\t<span class="token keyword">get</span> <span class="token function">idInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>domainId <span class="token operator">+</span> <span class="token string">&#39;---&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parentId\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">public</span> <span class="token keyword">set</span> <span class="token function">mPid</span><span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>parentId <span class="token operator">=</span> v\n    <span class="token punctuation">}</span>\n    \n    <span class="token function">logTreeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">subTree parentId </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>parentId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> st <span class="token operator">=</span> SubTree<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nst<span class="token punctuation">.</span><span class="token function">logTreeInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p><strong>总结</strong>：</p><table><thead><tr><th>关键字</th><th>用途</th></tr></thead><tbody><tr><td>private</td><td>私有，不能再对象外赋值属性</td></tr><tr><td>public</td><td>公有属性</td></tr><tr><td>protected</td><td>受保护属性，允许子类访问</td></tr><tr><td>readonly</td><td>只读，不能改变该属性值。</td></tr><tr><td>set</td><td>定义set方法，通过属性值方式赋值</td></tr><tr><td>get</td><td>定义get方法，通过属性值方式访问</td></tr><tr><td>extends</td><td>继承</td></tr><tr><td>static</td><td>静态变量/方法，通过类名访问</td></tr><tr><td>abstract</td><td>定义抽象类，抽象方法</td></tr><tr><td>单例模式</td><td>使用私有构造方法和静态方法实现</td></tr></tbody></table><h2 id="interface"><a class="header-anchor" href="#interface">#</a> interface</h2><p>示例：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">TagTopic</span> <span class="token punctuation">{</span>\n\tname<span class="token operator">:</span> <span class="token builtin">string</span>\n    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token builtin">number</span>\n    \n    <span class="token function">logInfo</span><span class="token punctuation">(</span>phrase<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> topic1<span class="token operator">:</span> TagTopic <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>\n    <span class="token keyword">type</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">logInfo</span><span class="token operator">:</span> <span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\ntopic1<span class="token punctuation">.</span><span class="token function">logInfo</span><span class="token punctuation">(</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">)</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>接口仅用于描述对象的结构，非常清晰</p><p>可由子类实现,实现多个接口</p><p>接口之间可以继承，继承多个接口</p><p>相比抽象类，接口中不能包含任何非抽象方法</p></blockquote><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">enum</span> LogType <span class="token punctuation">{</span>\n\t<span class="token constant">SUCCESS</span><span class="token punctuation">,</span>\n\t<span class="token constant">WARNING</span><span class="token punctuation">,</span>\n\t<span class="token constant">INFO</span><span class="token punctuation">,</span>\n\t<span class="token constant">ERROR</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">CommonLog</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">type</span><span class="token operator">:</span> LogType\n\tmessage<span class="token operator">:</span> <span class="token builtin">string</span>\n\ttitle<span class="token operator">:</span> <span class="token builtin">string</span>\n\n    <span class="token function">log</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ColorLog</span> <span class="token keyword">implements</span> <span class="token class-name">CommonLog</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">type</span><span class="token operator">:</span> LogType\n\tmessage<span class="token operator">:</span> <span class="token builtin">string</span>\n\ttitle<span class="token operator">:</span> <span class="token builtin">string</span>\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token operator">:</span> LogType<span class="token punctuation">,</span> title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token keyword">type</span>\n\t\t<span class="token class-name"><span class="token keyword">this</span></span><span class="token punctuation">.</span>message <span class="token operator">=</span> message\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title\n\t<span class="token punctuation">}</span>\n\t<span class="token function">log</span><span class="token punctuation">(</span>content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> LogType<span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">%c </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">&#39;color:#0f0;&#39;</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> LogType<span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">%c </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">&#39;color:red;&#39;</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">===</span> LogType<span class="token punctuation">.</span><span class="token constant">WARNING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">%c </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>content<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token string">&#39;color:orange;&#39;</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> colorLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorLog</span><span class="token punctuation">(</span>LogType<span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">,</span> <span class="token string">&#39;warning title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;waring content&#39;</span><span class="token punctuation">)</span>\ncolorLog<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;waring content&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p><strong>可以用接口方式定义函数</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">AddFn</span> <span class="token punctuation">{</span>\n\t<span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> add1<span class="token operator">:</span> AddFn\nadd1 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>和如下方式等价：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">AddFnNormal</span> <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span>\n<span class="token keyword">let</span> add2<span class="token operator">:</span> AddFnNormal\nadd2 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>接口中的可选参数</strong></p><p>类和接口都可以使用可选参数/方法</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Uname</span> <span class="token punctuation">{</span>\n    name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">subName</span> <span class="token keyword">implements</span> <span class="token class-name">Uname</span> <span class="token punctuation">{</span>\n\tfirstName<span class="token operator">:</span> <span class="token builtin">string</span>\n\tlastName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n\t<span class="token keyword">constructor</span><span class="token punctuation">(</span>firstName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName\n\t<span class="token punctuation">}</span>\n    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>说明</p><p>查看接口编译成的js代码，可以发现没有任何接口数据的痕迹。使用<code>es6</code>以上 的target编译仍然没有。</p><p>其实interface是纯正的typescript中的概念，<strong>仅在开发期使用</strong>，用于提升代码可读性</p></blockquote>',38),t={render:function(n,s){return p}}}}]);