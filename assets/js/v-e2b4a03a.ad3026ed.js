(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[1797],{9670:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-e2b4a03a",path:"/typescript/tsc%E6%8C%87%E4%BB%A4%E5%8F%8Atsconfig.json%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html",title:"tsc指令及tsconfig.json配置文件",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"tsc指令",slug:"tsc指令",children:[]},{level:2,title:"tsconfig.json",slug:"tsconfig-json",children:[{level:3,title:"compilerOptions",slug:"compileroptions",children:[]},{level:3,title:"exclude",slug:"exclude",children:[]},{level:3,title:"include",slug:"include",children:[]},{level:3,title:"file",slug:"file",children:[]}]}],filePathRelative:"typescript/tsc指令及tsconfig.json配置文件.md",git:{updatedTime:1624500867e3,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},2541:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>o});const e=(0,a(6252).uE)('<h1 id="tsc指令及tsconfig-json配置文件"><a class="header-anchor" href="#tsc指令及tsconfig-json配置文件">#</a> tsc指令及tsconfig.json配置文件</h1><h2 id="tsc指令"><a class="header-anchor" href="#tsc指令">#</a> tsc指令</h2><p><strong>编译指定文件</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>tsc app.ts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>watch实时编译指定文件</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>tsc app.ts -w\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><p><strong>生成<code>tsconfig.json</code></strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> tsc --init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>编译整个工程文件</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 把当前tsconfig.json所在工程下的ts文件都编译成js文件</span>\ntsc\n<span class="token comment"># watch工程下所有ts文件，编译成js文件</span>\ntsc -w\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>查看typescript版本</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>tsc -v\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="tsconfig-json"><a class="header-anchor" href="#tsconfig-json">#</a> tsconfig.json</h2><p>配置如何编译工程中ts文件的</p><h3 id="compileroptions"><a class="header-anchor" href="#compileroptions">#</a> compilerOptions</h3><p>配置如何编译ts文件。其中各个选项配置含义不同</p><h4 id="target选项"><a class="header-anchor" href="#target选项">#</a> target选项</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>指定编译的js文件版本。比如es5一下<code>let a = 3</code>这样的代码会编译成<code>var a = 3</code>，而<code>ES2016</code>下，会编译成<code>let a = 3</code>。另一个例子是当我们编写<code>class</code>类的时候，不同的target会编译出不同的js代码去兼容浏览器。所以为了浏览器兼容性，默认的是<code>es5</code></p><h4 id="lib选项"><a class="header-anchor" href="#lib选项">#</a> lib选项</h4><p>不包含此选项时，默认以target默认选项。当包含此选项时，以配置的lib选项值作为编译依赖库</p><blockquote><p>如用ts进行dom元素获取及事件添加，当配置为如下时，会报错</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>可以理解为在没有指定库的情况下，ts无法判断其运行环境是否能操作dom</p></blockquote><p>常规配置：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>    <span class="token property">&quot;lib&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string">&quot;esnext&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;dom&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;dom.iterable&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;scripthost&quot;</span>\n    <span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="allowjs选项"><a class="header-anchor" href="#allowjs选项">#</a> <em>allowJs</em>选项</h4><p>允许使用js</p><h4 id="checkjs选项"><a class="header-anchor" href="#checkjs选项">#</a> <em>checkJs</em>选项</h4><p>会检测js文件的语法报错</p><h4 id="sourcemap选项"><a class="header-anchor" href="#sourcemap选项">#</a> sourceMap选项</h4><p>配置true后，可以查看ts源码。否则chrome中调试只能看到js代码。方便断点调试等。</p><p>配置后针对每个ts文件都会生成一个<code>js.map</code>文件</p><h4 id="outdir选项"><a class="header-anchor" href="#outdir选项">#</a> outDir选项</h4><p>配置编译后的<code>js文件存放路径</code>。</p><p>在工程化的项目中，一般源码放在<code>src</code>目录，编译后文件放在<code>dist</code>目录。所以我们可以这样配置：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./dist/&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这样编译后的文件就放在dist目录下了。</p><h4 id="removecomments选项"><a class="header-anchor" href="#removecomments选项">#</a> removeComments选项</h4><p>配置为true后，编译后的js文件中会删除注释</p><h4 id="noemit选项"><a class="header-anchor" href="#noemit选项">#</a> noEmit选项</h4><p>有的时候不想文件编译，可设置其为true 就不会编译输出js文件了。</p><h4 id="strict选项相关配置"><a class="header-anchor" href="#strict选项相关配置">#</a> Strict选项相关配置</h4><p>严格编译模式，有许多配置可选；</p><p>如下，函数中<code>data</code>隐含类型为any时，会报错</p><p><img src="https://fun-typora-pics.oss-cn-beijing.aliyuncs.com/img/20201202154117.png" alt="image-20201202153554472"></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token string">&quot;noImplicitAny&quot;</span><span class="token builtin class-name">:</span> <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>配置<code>noImplicitAny</code>为<code>false</code>会忽略该检测。</p><p>当然更好的方式是，指定data的类型，如<code>data: string</code></p><p>同理<code>strictNullChecks</code>可以控制空值检测</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>一下这些属性都是用于忽略检测的：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>    <span class="token property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              <span class="token comment">/* Enable strict null checks. */</span>\n    <span class="token property">&quot;strictFunctionTypes&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           <span class="token comment">/* Enable strict checking of function types. */</span>\n    <span class="token property">&quot;strictBindCallApply&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           <span class="token comment">/* Enable strict &#39;bind&#39;, &#39;call&#39;, and &#39;apply&#39; methods on functions. */</span>\n    <span class="token property">&quot;strictPropertyInitialization&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">/* Enable strict checking of property initialization in classes. */</span>\n    <span class="token property">&quot;noImplicitThis&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">/* Raise error on &#39;this&#39; expressions with an implied &#39;any&#39; type. */</span>\n    <span class="token property">&quot;alwaysStrict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  <span class="token comment">/* Parse in strict mode and emit &quot;use strict&quot; for each source file. */</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="其他常用变量检测"><a class="header-anchor" href="#其他常用变量检测">#</a> 其他常用变量检测</h4><p><code>noUnusedLocals</code>会检测未使用的局部变量</p><p><code>noUnusedParameters</code>会检测未使用的参数</p><p><code>noImplicitReturns</code>会检测是否有走不到的return代码</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>    <span class="token comment">/* Additional Checks */</span>\n    <span class="token property">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token comment">/* Report errors on unused locals. */</span>\n    <span class="token property">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token comment">/* Report errors on unused parameters. */</span>\n    <span class="token property">&quot;noImplicitReturns&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             <span class="token comment">/* Report error when not all code paths in function return a value. */</span>\n   \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这些会通过警告的方式提示。</p><h4 id="使用装饰器"><a class="header-anchor" href="#使用装饰器">#</a> 使用装饰器</h4><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="exclude"><a class="header-anchor" href="#exclude">#</a> exclude</h3><p>配置排除的文件</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>  <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;analytic.ts&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;*.dev.ts&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;node_modules&quot;</span>\n  <span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="include"><a class="header-anchor" href="#include">#</a> include</h3><p>当没有<code>include</code>标签，所有文件都会编译，当有<code>include</code>标签，<strong>只会编译include标签内的文件</strong></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>  <span class="token string">&quot;include&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;app.ts&quot;</span>\n  <span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>只有app.ts文件会编译，其他文件都不会编译。</p><h3 id="file"><a class="header-anchor" href="#file">#</a> file</h3><p>file标签同include作用</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>  <span class="token string">&quot;files&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;app.ts&quot;</span>\n  <span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',70),o={render:function(s,n){return e}}}}]);