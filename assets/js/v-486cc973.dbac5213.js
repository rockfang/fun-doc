(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[7246],{6840:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-486cc973",path:"/interview/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98-%E2%80%9C%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%E2%80%9D%E5%92%8C%E2%80%9D%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E2%80%9D.html",title:"前端面试问题-“防抖函数”和”节流函数”",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"防抖函数",slug:"防抖函数",children:[]},{level:2,title:"节流函数",slug:"节流函数",children:[]}],filePathRelative:"interview/前端/前端面试问题-“防抖函数”和”节流函数”.md",git:{updatedTime:162452411e4,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},7866:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="前端面试问题-防抖函数-和-节流函数"><a class="header-anchor" href="#前端面试问题-防抖函数-和-节流函数">#</a> 前端面试问题-“防抖函数”和”节流函数”</h1><h2 id="防抖函数"><a class="header-anchor" href="#防抖函数">#</a> 防抖函数</h2><blockquote><p>防抖函数，即一个延时执行函数，当指定时间内再次触发时，会取消上个定时器，只执行当前函数。即目的是让函数再指定时间内只执行一次。</p></blockquote><p>应用场景1：页面滚动触发函数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>’滚动了’<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//一滚动就会执行无数次</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上面函数，我们滚动页面，会打印无数次。有时候我们不希望执行这么多次，太频繁，只想指定时间内的滚动，就执行最新一次。 <strong>定义防抖函数：</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span>delay<span class="token operator">=</span><span class="token number">300</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>调用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//防抖函数时给原有函数做了一层包装，debounce函数只执行一次，后续滚动的时候执行debounce中返回的函数</span>\nwindow<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>’滚动了’<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>代码解析：</p><ul><li>防抖函数debounce只执行一次，即函数赋值的时候</li><li>后续执行的是debounce函数中返回的函数</li><li>而该返回函数中，每次都先清理旧的定时器，再开启新的定时器执行。保证了指定时间内，函数callback函数只执行一次</li></ul><p>应用场景2：输入框输入文本，即时搜索</p><blockquote><p>在输入框快速输入时，显然不适合每个字符添加后都去搜索，当用户短时间内没有再次输入新值，就去搜索。是比较合理的方式。即可用防抖函数来处理这种情景。</p></blockquote><h2 id="节流函数"><a class="header-anchor" href="#节流函数">#</a> 节流函数</h2><blockquote><p>节流函数时，在特定时间内，不再执行函数。超过指定时间才再次触发执行函数。</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">callback<span class="token punctuation">,</span>period<span class="token operator">=</span><span class="token number">300</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">-</span> last <span class="token operator">&gt;</span> period<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        last <span class="token operator">=</span> now<span class="token punctuation">;</span>\n     <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>调用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>’滚动了’<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>函数原理同防抖函数,都是对函数做一层包装。返回一个处理过的函数。其中判断时间是否满足，决定是否执行。</p>',19),t={render:function(n,s){return p}}}}]);