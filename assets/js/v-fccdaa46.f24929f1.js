(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[6899],{8402:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-fccdaa46",path:"/typescript/TypeScript-%E6%B3%9B%E5%9E%8B.html",title:"TypeScript-泛型",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"泛型方法",slug:"泛型方法",children:[{level:3,title:"普通用法",slug:"普通用法",children:[]},{level:3,title:"泛型限制",slug:"泛型限制",children:[]},{level:3,title:"泛型限制-自定义类型",slug:"泛型限制-自定义类型",children:[]},{level:3,title:"泛型限制-keyof 类型",slug:"泛型限制-keyof-类型",children:[]}]},{level:2,title:"泛型类",slug:"泛型类",children:[]},{level:2,title:"TS工具类",slug:"ts工具类",children:[{level:3,title:"Partial<T>",slug:"partial-t",children:[]},{level:3,title:"Readonly<T>",slug:"readonly-t",children:[]}]},{level:2,title:"总结",slug:"总结",children:[]}],filePathRelative:"typescript/TypeScript-泛型.md",git:{updatedTime:1624500867e3,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},3955:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>m});var p=a(6252);const t=(0,p.uE)('<h1 id="typescript-泛型"><a class="header-anchor" href="#typescript-泛型">#</a> TypeScript-泛型</h1><p>查看泛型的例子：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cai&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fun&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> arr2<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;cai&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fun&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> promise<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;success&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\npromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">//此处会有string能使用的方法提示 </span>\n  result<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>我们看到泛型可以做到：</p><blockquote><p>定义数组可以明确数组中数据的类型</p><p>通过指定泛型参数创建的<code>promise</code>，可以明确数据返回类型，拥有更好的编码提示</p></blockquote><h2 id="泛型方法"><a class="header-anchor" href="#泛型方法">#</a> 泛型方法</h2><h3 id="普通用法"><a class="header-anchor" href="#普通用法">#</a> 普通用法</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">mergeObject</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj1<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">,</span> obj2<span class="token operator">:</span> <span class="token constant">B</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> mergeResult <span class="token operator">=</span> <span class="token function">mergeObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;cai&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> company<span class="token operator">:</span> <span class="token string">&#39;hcdsj&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mergeResult<span class="token punctuation">.</span>company<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在方法名后<code>&lt;参数泛型变量&gt;</code>指定泛型类型，实现泛型方法。</p><p>这样typescript会自动通过<code>类型推断</code>得出函数返回值的类型(示例中为<code>A&amp;B</code>类型)</p><h3 id="泛型限制"><a class="header-anchor" href="#泛型限制">#</a> 泛型限制</h3><p>尽管泛型指定通用的类型，但我们可以给通用的类型做限制，提升代码健壮性。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">mergeObject</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj1<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">,</span> obj2<span class="token operator">:</span> <span class="token constant">B</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> mergeResult <span class="token operator">=</span> <span class="token function">mergeObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;cai&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> company<span class="token operator">:</span> <span class="token string">&#39;hcdsj&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 使用数字等其他类型变量时，会提示错误</span>\n<span class="token comment">// const mergeResult2 = mergeObject({ name: &#39;cai&#39; }, 123)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mergeResult<span class="token punctuation">.</span>company<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>即通过<code>extends</code>关键字可指定泛型参数的继承类，从而对参数做限制。</p><h3 id="泛型限制-自定义类型"><a class="header-anchor" href="#泛型限制-自定义类型">#</a> 泛型限制-自定义类型</h3><p>定义一个方法返回拥有<code>length</code>属性的参数的描述信息和参数本身。如下：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// type lengthy = {</span>\n<span class="token comment">// \tlength: number</span>\n<span class="token comment">// }</span>\n<span class="token keyword">interface</span> <span class="token class-name">lengthy</span> <span class="token punctuation">{</span>\n\tlength<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">countAndDescription</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> lengthy<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> descriptions <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tdescriptions <span class="token operator">=</span> <span class="token string">&#39;the length is one&#39;</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tdescriptions <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">have </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> elements</span><span class="token template-punctuation string">`</span></span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token punctuation">[</span>e<span class="token punctuation">,</span> descriptions<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;This is a sentence&#39;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">countAndDescription</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//[&quot;This is a sentence&quot;, &quot;have 18 elements&quot;]</span>\n\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">countAndDescription</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[ [3, 1, 2], &quot;have 3 elements&quot;]</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">countAndDescription</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Error</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><blockquote><p>string和array都有length属性，所以利用此抽离一个新的类型</p><p>通过<code>type</code>或者<code>interface</code>定义了该类型</p></blockquote><h3 id="泛型限制-keyof-类型"><a class="header-anchor" href="#泛型限制-keyof-类型">#</a> 泛型限制-keyof 类型</h3><p><code>keyof</code> 获取某种类型的所有键，其返回类型是联合类型</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">t</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token comment">// 同 type t = &quot;a&quot; | &quot;b&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>获取对象中指定key的值:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">extractAndConvert</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n\tobj<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n\tkey<span class="token operator">:</span> <span class="token constant">K</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token string">&#39;value:&#39;</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> labelInfo <span class="token operator">=</span> <span class="token punctuation">{</span>\n    labelId<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    labelName<span class="token operator">:</span> <span class="token string">&#39;活跃度&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">extractAndConvert</span><span class="token punctuation">(</span>labelInfo<span class="token punctuation">,</span><span class="token string">&quot;labelName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">extractAndConvert</span><span class="token punctuation">(</span>labelInfo<span class="token punctuation">,</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Error 提示参数类型错误</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="泛型类"><a class="header-anchor" href="#泛型类">#</a> 泛型类</h2><p>封装一个数组存取的类：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">CustomStorage<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n\t<span class="token keyword">private</span> data<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n\t<span class="token function">add</span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token function">remove</span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">]</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomStorage<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nstore<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span>\nstore<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;account&#39;</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nstore<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;account&#39;</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p>其中限制了泛型 T 为基础的数据类型，是为了避免存储object时，remove一个新的object达不到预期效果。</p></blockquote><h2 id="ts工具类"><a class="header-anchor" href="#ts工具类">#</a> TS工具类</h2><p>typescript工具类中大量使用泛型，实现了许多功能实用的类型。</p><h3 id="partial-t"><a class="header-anchor" href="#partial-t">#</a> Partial<code>&lt;T&gt;</code></h3><p><strong>将T中所有属性转换为可选属性。返回的类型可以是T的任意子集</strong></p><p>示例1：想通过手动赋值对象属性会报错</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">LabelInfo</span> <span class="token punctuation">{</span>\n\tlabelId<span class="token operator">:</span> <span class="token builtin">number</span>\n\tlabelName<span class="token operator">:</span> <span class="token builtin">string</span>\n\tlabelType<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createLabelInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LabelInfo <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> labelInfo<span class="token operator">:</span> LabelInfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// Error 缺少类型中的参数报错，手动赋值无效</span>\n\tlabelInfo<span class="token punctuation">.</span>labelId <span class="token operator">=</span> <span class="token number">3</span>\n\tlabelInfo<span class="token punctuation">.</span>labelName <span class="token operator">=</span> <span class="token string">&#39;标签名称&#39;</span>\n\tlabelInfo<span class="token punctuation">.</span>labelType <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span>\n\t<span class="token keyword">return</span> labelInfo\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>使用<code>Partial</code>类：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">LabelInfo</span> <span class="token punctuation">{</span>\n\tlabelId<span class="token operator">:</span> <span class="token builtin">number</span>\n\tlabelName<span class="token operator">:</span> <span class="token builtin">string</span>\n\tlabelType<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">createLabelInfo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LabelInfo <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> labelInfo<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>LabelInfo<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\tlabelInfo<span class="token punctuation">.</span>labelId <span class="token operator">=</span> <span class="token number">3</span>\n\tlabelInfo<span class="token punctuation">.</span>labelName <span class="token operator">=</span> <span class="token string">&#39;标签名称&#39;</span>\n\t<span class="token comment">// labelInfo.labelType = &#39;2&#39;</span>\n\t<span class="token keyword">return</span> labelInfo <span class="token keyword">as</span> LabelInfo\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> label <span class="token operator">=</span> <span class="token function">createLabelInfo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// {labelId: 3, labelName: &quot;标签名称&quot;}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>示例2：使用Partial实现对象属性覆盖</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  done<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">updateTodo</span><span class="token punctuation">(</span>todo<span class="token operator">:</span> Todo<span class="token punctuation">,</span> newTodo<span class="token operator">:</span> Partial<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>todo<span class="token punctuation">,</span> <span class="token operator">...</span>newTodo <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> todo<span class="token operator">:</span> Todo <span class="token operator">=</span> <span class="token punctuation">{</span>\n  title<span class="token operator">:</span> <span class="token string">&#39;First Todo&#39;</span><span class="token punctuation">,</span>\n  description<span class="token operator">:</span> <span class="token string">&#39;this is the first todo&#39;</span><span class="token punctuation">,</span>\n  done<span class="token operator">:</span> <span class="token boolean">false</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">updateTodo</span><span class="token punctuation">(</span>todo<span class="token punctuation">,</span> <span class="token punctuation">{</span> done<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="readonly-t"><a class="header-anchor" href="#readonly-t">#</a> Readonly<code>&lt;T&gt;</code></h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> students<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;alan&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;armin&#39;</span><span class="token punctuation">]</span>\nstudents<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;aukman&quot;</span><span class="token punctuation">)</span> <span class="token comment">//ERROR!</span>\nstudents<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//ERROR!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>还有许多工具类，关于TS Utility Types的使用：</p>',40),e={href:"https://zhuanlan.zhihu.com/p/120802610",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("https://zhuanlan.zhihu.com/p/120802610"),c={href:"http://www.semlinker.com/ts-utility-types/#3-1-Partial",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("http://www.semlinker.com/ts-utility-types/#3-1-Partial"),u=(0,p.Wm)("h2",{id:"总结"},[(0,p.Wm)("a",{class:"header-anchor",href:"#总结"},"#"),(0,p.Uk)(" 总结")],-1),r=(0,p.Wm)("p",null,[(0,p.Uk)("泛型及泛型限制使得我们可以灵活的组合各种类型，实现"),(0,p.Wm)("code",null,"类型安全"),(0,p.Uk)("使用")],-1),i=(0,p.Wm)("p",null,"泛型和联合类型的场景：",-1),k=(0,p.Wm)("p",null,"联合类型：类中每个方法都想灵活的使用任意类型",-1),b=(0,p.Wm)("p",null,"泛型：整个类中锁定一个确定类型使用",-1),m={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("p",null,[(0,p.Wm)("a",e,[o,(0,p.Wm)(a)])]),(0,p.Wm)("p",null,[(0,p.Wm)("a",c,[l,(0,p.Wm)(a)])]),u,r,i,k,b],64)}}}}]);