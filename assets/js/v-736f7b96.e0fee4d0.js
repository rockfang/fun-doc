(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[2823],{1661:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-736f7b96",path:"/interview/%E5%89%8D%E7%AB%AF/JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6.html",title:"JS中的事件循环机制",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"任务队列的概念",slug:"任务队列的概念",children:[]},{level:2,title:"事件循环",slug:"事件循环",children:[]},{level:2,title:"参考链接",slug:"参考链接",children:[]}],filePathRelative:"interview/前端/JS中的事件循环机制.md",git:{updatedTime:1637723549e3,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:2}]}}},4849:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>i});var e=a(6252);const t=(0,e.uE)('<h1 id="js中的事件循环机制"><a class="header-anchor" href="#js中的事件循环机制">#</a> JS中的事件循环机制</h1><blockquote><p>JavaScript 是一门单线程语言，异步操作都是放到事件循环队列里面，等待主执行栈来执行的，并没有专门的异步执行线程。</p></blockquote><h2 id="任务队列的概念"><a class="header-anchor" href="#任务队列的概念">#</a> 任务队列的概念</h2><p>同步任务，即立即执行的任务，会推到主线程栈中执行。异步任务分为宏任务和微任务</p><ul><li>宏任务macrotask：包含执行整体的js代码，事件回调，XHR回调，定时器（setTimeout/setInterval/setImmediate），IO操作，UI render</li><li>微任务microtask：更新应用程序状态的任务，包括promise回调，MutationObserver，process.nextTick, Object.observe</li></ul><blockquote><p>I/O这一项感觉有点儿笼统，一般认为点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O。</p></blockquote><h2 id="事件循环"><a class="header-anchor" href="#事件循环">#</a> 事件循环</h2><p><img src="https://api.icaifun.com/articleImages/1588129447913.png" alt=""></p><blockquote><p>同步任务推入主执行栈，异步任务推入执行队列。 主执行栈中任务执行完毕为空，回去任务队列读取任务推入主执行栈。 上述过程不断重复，就叫事件循环Event Loop.</p></blockquote><p>而每一次循环被称为Tick,每一次tick执行其实是比较复杂的，Tick流程： <img src="https://api.icaifun.com/articleImages/1588131183595.jpg" alt=""></p><ol><li>在此次 tick 中选择最先进入队列的任务( oldest task )，如果有则执行(一次)</li><li>检查是否存在微任务Microtasks，如果存在则不停地执行，直至清空Microtask Queue</li><li>更新 render</li><li>主线程重复执行上述步骤</li></ol><p>即，每次循环，都优先执行微任务，而这次tick读取的宏任务是在下次tick时再执行的。</p><p>示例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aaaaaa&#39;</span><span class="token punctuation">)</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bbb&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ccc&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ddd&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ffff&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>分析代码：</p><ol><li>整体 script作为第一个宏任务进入主线程，遇到 console.log，输出 aaaaaa</li><li>遇到 setTimeout，其回调函数被分发到宏任务 Event Queue 中</li><li>遇到 Promise，new promise中的代码立即执行，输出 ccc. Promise中then函数被分到到微任务 Event Queue 中.记为then1</li><li>遇到console.log ，输出 ffff</li></ol><p>此时，任务队列中：</p><ul><li>宏任务：setTimeout</li><li>微任务：then1</li></ul><p>执行then1输出dddd,这样清空了微任务栈，再执行setTimeout输出 bbb。 因此整个输出结果为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>aaaaaa\nccc\nffff\nddd\nbbb\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="参考链接"><a class="header-anchor" href="#参考链接">#</a> 参考链接</h2><p>本文参考于：</p>',22),p={href:"https://www.cnblogs.com/yugege/p/9598265.html",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("https://www.cnblogs.com/yugege/p/9598265.html"),l={href:"https://www.cnblogs.com/jiasm/p/9482443.html",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("https://www.cnblogs.com/jiasm/p/9482443.html"),i={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("p",null,[(0,e.Wm)("a",p,[c,(0,e.Wm)(a)]),(0,e.Wm)("a",l,[o,(0,e.Wm)(a)])])],64)}}}}]);