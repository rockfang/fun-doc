(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[2240],{218:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-e7a97d7c",path:"/%E6%8C%87%E4%BB%A4/Git/Git%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html",title:"Git常用命令",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"git区域划分",slug:"git区域划分",children:[]},{level:3,title:"Windows下 Git常用命令",slug:"windows下-git常用命令",children:[]},{level:3,title:"Git配置项",slug:"git配置项",children:[]},{level:3,title:"git提交代码常见操作",slug:"git提交代码常见操作",children:[]},{level:3,title:"git 分支",slug:"git-分支",children:[]},{level:3,title:"远程分支操作",slug:"远程分支操作",children:[]},{level:3,title:"git版本库",slug:"git版本库",children:[]},{level:3,title:"冲突解决",slug:"冲突解决",children:[]},{level:3,title:"git中版本穿梭",slug:"git中版本穿梭",children:[]},{level:3,title:"差异性对比",slug:"差异性对比",children:[]},{level:3,title:"图形化界面",slug:"图形化界面",children:[]},{level:3,title:"gitignore中添加文件失效",slug:"gitignore中添加文件失效",children:[]},{level:3,title:"文件大小写敏感",slug:"文件大小写敏感",children:[]}],filePathRelative:"指令/Git/Git常用指令.md",git:{updatedTime:1631007193e3,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:4}]}}},9359:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>u});var e=a(6252);const l=(0,e.uE)('<h1 id="git常用命令"><a class="header-anchor" href="#git常用命令">#</a> Git常用命令</h1><h3 id="git区域划分"><a class="header-anchor" href="#git区域划分">#</a> git区域划分</h3><table><thead><tr><th>区域</th><th>状态名称</th><th>说明</th></tr></thead><tbody><tr><td>工作区</td><td>unstage</td><td>本地文件所在,注意已经commit的文件如果修改后会回到工作区</td></tr><tr><td>暂存区</td><td>staged</td><td>add指令后，文件被添加到暂存区</td></tr><tr><td>本地仓库</td><td></td><td>commit指令后，文件被添加到本地仓库</td></tr><tr><td>远程仓库</td><td></td><td>push指令后，文件被提交到远程仓库</td></tr></tbody></table><h3 id="windows下-git常用命令"><a class="header-anchor" href="#windows下-git常用命令">#</a> Windows下 Git常用命令</h3><ol start="0"><li>git bash操作技巧</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Ctrl + a //光标跳到编辑行行首\nCtrl + e //光标跳到编辑行行尾\nCtrl + c //光标跳出当前行，另起一行输入\n<span class="token builtin class-name">pwd</span>      //print working directory 打印工作目录\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol><li>将当前目录纳入git管理</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> init\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>删除本地仓库(linux指令 迭代删除文件夹)</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">rm</span> -rf .git\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>创建文件（linux指令 新建文件）</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">touch</span> .ignore\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="4"><li>查看工作区文件状态</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> status\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="5"><li>把文件添加到<code>暂存区</code></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> xxx.java\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="6"><li>把当前目录所有文件添加到 <code>暂存区</code></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n或者\n<span class="token function">git</span> <span class="token function">add</span> *\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>区别：</p><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td><code>git add .</code></td><td>添加所有文件到暂存区，<code>.gitignore</code>中忽略的文件不会被添加。推荐用此指令。</td></tr><tr><td><code>git add *</code></td><td>添加所有文件到暂存区，忽略的文件也会被添加过去,不推荐用此指令。</td></tr></tbody></table><ol start="7"><li>把文件从<code>暂存区</code> 移出到 <code>工作区</code></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> --cached xxx.java\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="8"><li>文件提交到本地仓库，并添加提交message</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> commit //提交并进入message编辑页\n//退出编辑页\nEsc 后 Shift + ZZ\n//直接写message提交\n<span class="token function">git</span> commit -m <span class="token string">&quot;my first commit&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>修改最近一次提交message:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> commit --amend -m <span class="token string">&#39;new message about latest commit&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>add 和 commit 合并操作：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> commit -am <span class="token string">&#39;注释&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="9"><li>文件编辑页操作</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token number">1</span>.进入index.html\n<span class="token function">vi</span> index.html\n<span class="token number">2</span>. 按 o 或者 a 使得文件编辑页进入编辑模式\n\tO:光标另起一行开始编辑\n\ta:光标在当前行开始编辑\n\n<span class="token number">3</span>. 编辑完成，按ESC退出编辑模式\n<span class="token number">4</span>. Shift + ZZ 退出文件编辑\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="10"><li>新内容覆盖文件内容</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;新的你好&#39;</span> <span class="token operator">&gt;</span> hello.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="git配置项"><a class="header-anchor" href="#git配置项">#</a> Git配置项</h3><ol><li>设置邮箱用户名</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config --global //给整个计算机一次性设置\n<span class="token function">git</span> config --system //推荐，给当前用户一次性设置\n<span class="token function">git</span> config --local //给当前项目一次性设置\n如：\n<span class="token function">git</span> config --system user.name <span class="token string">&#39;cai&#39;</span>\n<span class="token function">git</span> config --system user.email <span class="token string">&#39;123.qq.com&#39;</span>\n查看config配置项：\n如果是通过loca设置：\n<span class="token builtin class-name">cd</span> .git\n<span class="token function">cat</span> config\n如果是通过system设置：\n<span class="token builtin class-name">cd</span> ~  //切换到用户目录，/c/Users/coold\n<span class="token function">cat</span> .gitconfig //查看gitconfig配置\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ol start="2"><li>生成ssh公钥和私钥</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>ssh-keygen\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>把公钥贴到github账户下或者项目下即可。</p><ol start="3"><li>换行符配置,<code>CR</code> <code>CRLF</code> <code>LF</code>转换 场景： 在文本处理中, CR, LF, CR/LF 是不同操作系统上使用的 换行符</li></ol><ul><li>Dos 和 windows 采用“回车+换行，CR/LF”表示下一行；</li><li>UNIX/Linux 采用“换行符，LF”表示下一行；</li><li>苹果机(MAC OS 系统)则采用“回车符，CR”表示下一行</li></ul><p>在git中add代码，常会提示：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\nwarning: CRLF will be replaced by LF <span class="token keyword">in</span> <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>意思就是：我们在windows下开发的代码，换行符用的是<code>CRLF</code>,而git上希望存为<code>LF</code> Linux格式的换行符 因此就会造成别人在windows上拉取代码，拿到的是<code>LF</code>换行，在做<code>diff</code>对比代码时，带来不便。</p><p>我们可以对换行符做转换解决该问题：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 提交时转换为LF，检出时转换为CRLF</span>\n<span class="token function">git</span> config --global core.autocrlf <span class="token boolean">true</span>\n\n<span class="token comment"># 提交时转换为LF，检出时不转换</span>\n<span class="token function">git</span> config --global core.autocrlf input\n\n<span class="token comment"># 提交检出均不转换</span>\n<span class="token function">git</span> config --global core.autocrlf <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="git提交代码常见操作"><a class="header-anchor" href="#git提交代码常见操作">#</a> git提交代码常见操作</h3><ol start="0"><li>查看文件状态</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> status 查看文件状态，非常重要，每次操作前，最好都执行该命令看看\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',48),i=(0,e.Uk)("参考链接："),c={href:"http://blog.konghy.cn/2017/03/19/git-lf-or-crlf/",target:"_blank",rel:"noopener noreferrer"},t=(0,e.Uk)("Git 多平台换行符问题"),r=(0,e.Uk)("，"),p={href:"https://www.jianshu.com/p/8d33019d1c69",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("CR，LF，CR/LF，回车，换行"),o=(0,e.uE)('<ol><li>从本地仓库还原文件到工作区。 本地仓库 --&gt; 工作区</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> status 查看到当前文件做了修改，现在想回退\n<span class="token function">git</span> chechout -- index.html \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>把add的文件做回退. 暂存区 --&gt; 工作区</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> --cached index.html\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>或者</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token function">head</span> index.html\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>删除已commit的文件</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> index.html//删除后，文件状态在暂存区。如果还要彻底删除文件，执行下一行\n<span class="token function">git</span> commit -m <span class="token string">&quot;执行刚刚的删除操作&quot;</span>//彻底删除刚刚rm的文件\n或者：\n<span class="token function">rm</span> index.html //操作系统删除，删除后文件状态回退到工作区，如果要彻底删除，执行下2行\n<span class="token function">git</span> <span class="token function">add</span> index.html\n<span class="token function">git</span> commit -m <span class="token string">&quot;彻底删除index.html&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="4"><li>回退删除的已commit的文件</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>通过git <span class="token function">rm</span> index.html操作删除了文件\n回退：\n<span class="token function">git</span> reset <span class="token function">head</span> index.html //把操作回退到 工作区\n<span class="token function">git</span> checkout  -- index.html //撤销删除操作\n此时index.html就回退到本地仓库，即未删除前的状态。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="4"><li>查看提交日志 查看本地git commit 提交日志</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> log\n<span class="token function">git</span> log -2 //查看最近2次提交\n<span class="token function">git</span> log --oneline //一行显示log信息\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>查看远程日志：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> log origin/master\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>5.查看操作记录.可以帮助我们 实现“后悔”操作</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> reflog\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="git-分支"><a class="header-anchor" href="#git-分支">#</a> git 分支</h3><h4 id="本地分支操作"><a class="header-anchor" href="#本地分支操作">#</a> 本地分支操作</h4><ol><li>查看当前分支</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>创建分支</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch new_branch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>切换分支</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout 分支名\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>直接创建并切换分支：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout -b v2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="4"><li>删除分支</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -d 分支名\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果分支中有修改了文件，直接删除分支可能失败。要先合并再删除</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> merge new_branch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -d new_branch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>强行删除分支：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -D new_branch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>分支重命名：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -m dev dev2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="远程分支操作"><a class="header-anchor" href="#远程分支操作">#</a> 远程分支操作</h3><p>查看本地及本地的远程分支状况</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -av\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="创建本地dev分支并提交到远程dev分支"><a class="header-anchor" href="#创建本地dev分支并提交到远程dev分支">#</a> 创建本地dev分支并提交到远程dev分支</h4><ol><li>创建分支：</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>push并关联远程分支 首次关联并提交到远程dev分支：(远程会自动创建dev分支)</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push -u origin dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>或者这样关联：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push --set-upstream origin dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>或者：(把本地v1分支关联提交到远程v1分支)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push origin v1:v1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="拉取远程的分支代码"><a class="header-anchor" href="#拉取远程的分支代码">#</a> 拉取远程的分支代码</h4><p>最简单方式：(把远程v1分支拉取到本地v1分支)</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> pull origin v1:v1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> pull origin <span class="token operator">&lt;</span>远程分支名<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>本地分支名<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>方式2：</p><ol><li>拉取远程分支信息：</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> pull\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>查看分支信息:</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -av\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>创建并切换分支到dev:</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout -b dev origin/dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>方式3：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout --track origin/dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="删除远程分支"><a class="header-anchor" href="#删除远程分支">#</a> 删除远程分支</h4><p>在github上删除 命令删除： （空分支提交给远程test,实现删除远程test分支）</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push origin :test\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>或</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push origin --delete <span class="token builtin class-name">test</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="4"><li>clone远程指定分支代码</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone -b dev xxx.git\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="git版本库"><a class="header-anchor" href="#git版本库">#</a> git版本库</h3><p>一个项目一般常见的分支：</p><table><thead><tr><th>分支名称</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>master</td><td>主分支，存生产代码</td><td>很少变化</td></tr><tr><td>dev</td><td>开发分支</td><td>频繁改变</td></tr><tr><td>test</td><td>测试分支，基本开发完毕给测试人员的分支</td><td>常是通过dev合并提交测试用</td></tr><tr><td>bugfix</td><td>临时修复bug的分支</td><td></td></tr></tbody></table><ol><li>查看当前项目远程的版本库 由于git是分布式，本地代码完全可以提交到2个或多个远程仓库，可通过下面命令，查看远程仓库信息：</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> remote show\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查看具体版本库的详细信息：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> remote show origin\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>克隆远程项目并改名</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone xxx.git\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>修改拉取后，本地项目名称： myLocalName即为自己命名。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone xxx.git myLocalName\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="冲突解决"><a class="header-anchor" href="#冲突解决">#</a> 冲突解决</h3><p>在push代码时，若远程代码有别的用户新的提交，且本地代码修改部分和远程变化部分有交叉，会引起冲突。</p><ol><li>拉取代码并自动合并：</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> pull\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>或者手动拉取合并：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> fetch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> merge\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>手动解决冲突: 按提示找到冲突相关的文件，进入并手动合并代码逻辑。</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">vi</span> a.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>重新add commit代码</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> commit -m <span class="token string">&#39;解决了冲突&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> push\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="git中版本穿梭"><a class="header-anchor" href="#git中版本穿梭">#</a> git中版本穿梭</h3><p>场景:想把本地代码回退到指定的某个版本 <code>head</code>指当前的提交点。 回退到上个版本：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> reset --hard head^\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>回退到上上个版本：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> reset --hard head^^\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>...类推</p><p>回退到上n次版本：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> reset --hard head~n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>回退到指定版本：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> reset --hard sha1值的前几位\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>一般先通过git reflog 查看最近的操作和sha1值前几位，再 git reset --hard sha1值前几位</p><p>场景:回到过去某个版本创建分支后，基于分支写代码</p><ol><li>查看版本提交信息获取版本sha1值</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> reflog\n<span class="token function">git</span> log\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>版本穿梭（游离状态），穿梭到指定版本</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout sha1值\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>创建分支</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch mybranch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="4"><li>切换分支，开始代码书写</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout mybranch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="5"><li>回到主版本</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout master\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="差异性对比"><a class="header-anchor" href="#差异性对比">#</a> 差异性对比</h3><ol><li>查看某个文件责任。每一行的提交作者。</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> blame a.txt \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>查看工作区修改文件的变化（未暂存文件）</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">diff</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>查看暂存区和本地仓库文件差异</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">diff</span> --cached\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="图形化界面"><a class="header-anchor" href="#图形化界面">#</a> 图形化界面</h3><p>常用的2个图形化界面</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>gitk\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>和</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> gui\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="gitignore中添加文件失效"><a class="header-anchor" href="#gitignore中添加文件失效">#</a> gitignore中添加文件失效</h3><p>先清除缓存，在重新<code>track</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> -r --cached <span class="token builtin class-name">.</span>\n<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n<span class="token function">git</span> commit -m <span class="token string">&#39;update .gitignore&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="文件大小写敏感"><a class="header-anchor" href="#文件大小写敏感">#</a> 文件大小写敏感</h3><p>默认忽略大小写敏感。 下面指令设置为对大小写敏感。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> config core.ignorecase <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',131),u={render:function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[l,(0,e.Wm)("p",null,[i,(0,e.Wm)("a",c,[t,(0,e.Wm)(a)]),r,(0,e.Wm)("a",p,[d,(0,e.Wm)(a)])]),o],64)}}}}]);