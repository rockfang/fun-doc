(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[6313],{7891:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-4d71df07",path:"/interview/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98-JS%E4%B8%AD%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6.html",title:"前端面试问题-JS中事件机制",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"DOM事件级别",slug:"dom事件级别",children:[{level:3,title:"DOM 0级事件：",slug:"dom-0级事件",children:[]},{level:3,title:"DOM 3级事件",slug:"dom-3级事件",children:[]},{level:3,title:"DOM事件流",slug:"dom事件流",children:[]}]},{level:2,title:"参考链接",slug:"参考链接",children:[]}],filePathRelative:"interview/前端/前端面试问题-JS中事件机制.md",git:{updatedTime:162452411e4,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},5723:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="前端面试问题-js中事件机制"><a class="header-anchor" href="#前端面试问题-js中事件机制">#</a> 前端面试问题-JS中事件机制</h1><p>我们添加一个点击事件，有很多中方式，其实是不同dom版本提供的方式。当一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段：</p><ul><li>捕获阶段：事件从window对象自上而下向目标节点传播的阶段；</li><li>目标阶段：真正的目标节点正在处理事件的阶段；</li><li>冒泡阶段：事件从目标节点自下而上向window对象传播的阶段。</li></ul><p>这就被称为事件流(<code>Event Flow</code>)</p><h2 id="dom事件级别"><a class="header-anchor" href="#dom事件级别">#</a> DOM事件级别</h2><blockquote><p>DOM有4次版本更新，与DOM版本变更，产生了3种不同的DOM事件：DOM 0级事件处理，DOM 2级事件处理和DOM 3级事件处理。由于DOM 1级中没有事件的相关内容，所以没有DOM 1级事件。</p></blockquote><h3 id="dom-0级事件"><a class="header-anchor" href="#dom-0级事件">#</a> DOM 0级事件：</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”alert(’xxx’)”/</span><span class="token punctuation">&gt;</span></span>\n\n\nwindow.onload = function(){\n  document.write(”Hello world!”);\n};\n\n\n// HTML\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”btn”</span><span class="token punctuation">&gt;</span></span>Click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n\n// JavaScript\nvar btn = document.getElementById(’btn’);\nbtn.onclick = function(){\n    alert(’xxx’);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="dom-0级事件-特点"><a class="header-anchor" href="#dom-0级事件-特点">#</a> DOM 0级事件 特点：</h4><ul><li>解除事件，直接置null.如btn.onclick = null</li><li>同一个元素的同一种事件只能绑定一个函数，否则后面的函数会覆盖之前的函数</li><li>不存在兼容性问题</li></ul><h4 id="dom-2级事件特点"><a class="header-anchor" href="#dom-2级事件特点">#</a> DOM 2级事件特点：</h4><ul><li>通过addEventListener绑定的事件</li><li>同一个元素的同种事件可以绑定多个函数，按照绑定顺序执行</li><li>解绑事件时，使用removeEventListener 如btn.removeEventListener( ”click” ,fn)</li><li>removeEventListener()不能移除匿名添加的函数</li></ul><h3 id="dom-3级事件"><a class="header-anchor" href="#dom-3级事件">#</a> DOM 3级事件</h3><p>DOM3级事件在DOM2级事件的基础上添加了更多的事件类型，增加的类型如下：</p><ul><li>UI事件，当用户与页面上的元素交互时触发，如：load、scroll</li><li>焦点事件，当元素获得或失去焦点时触发，如：blur、focus</li><li>鼠标事件，当用户通过鼠标在页面执行操作时触发如：dblclick、mouseup</li><li>滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel</li><li>文本事件，当在文档中输入文本时触发，如：textInput</li><li>键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress</li><li>合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart</li><li>变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified</li><li>同时DOM3级事件也允许使用者自定义一些事件。</li></ul><h3 id="dom事件流"><a class="header-anchor" href="#dom事件流">#</a> DOM事件流</h3><p>当一个事件发生后，会在子元素和父元素之间传播（propagation）。这种传播分成三个阶段：</p><ul><li>捕获阶段：事件从window对象自上而下向目标节点传播的阶段；</li><li>目标阶段：真正的目标节点正在处理事件的阶段；</li><li>冒泡阶段：事件从目标节点自下而上向window对象传播的阶段。</li></ul><h4 id="捕获阶段"><a class="header-anchor" href="#捕获阶段">#</a> 捕获阶段</h4><p><img src="https://api.icaifun.com/articleImages/1588167808567.jpg" alt=""></p><h4 id="冒泡阶段"><a class="header-anchor" href="#冒泡阶段">#</a> 冒泡阶段</h4><p><img src="https://api.icaifun.com/articleImages/1588167829966.jpg" alt=""></p><p>事件传递顺序有这两种机制，那我怎么知道事件是依据哪种机制执行的呢？其实是两个阶段都会执行： <img src="https://api.icaifun.com/articleImages/1588167896727.jpg" alt=""> 当td的click事件发生时,先走红色捕获流程，到达目标节点td再走绿色冒泡流程。</p><h4 id="事件监听"><a class="header-anchor" href="#事件监听">#</a> 事件监听</h4><p>addEventListener()基本上有三个参数，分别是「事件名称」、「事件的处理程序」(事件触发时执行的function)，以及一个「Boolean」值，由这个Boolean决定事件是以「捕获」还是「冒泡」机制执行，若不指定则预设为「冒泡」.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>’btn’<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nbtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>’click’<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>’<span class="token constant">HI</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nbtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>’click’<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>’<span class="token constant">HELLO</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>将打印”HI”和”HELLO”，使用addEventListener,同一个元素的同种事件可以绑定多个函数，按照绑定顺序执行。</p><h4 id="移除事件"><a class="header-anchor" href="#移除事件">#</a> 移除事件</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>’btn’<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 把 event 函数程序拉出來</span>\n<span class="token keyword">var</span> <span class="token function-variable function">clickHandler</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>’<span class="token constant">HI</span>’<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nbtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>’click’<span class="token punctuation">,</span> clickHandler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 移除 clickHandler， ok!</span>\nbtn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>’click’<span class="token punctuation">,</span> clickHandler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="参考链接"><a class="header-anchor" href="#参考链接">#</a> 参考链接</h2><p>本文大量参考于 https://zhuanlan.zhihu.com/p/73091706 [https://zhuanlan.zhihu.com/p/73091706]，更多示例，前往参考文章查看。</p>',31),e={render:function(n,s){return t}}}}]);