(self.webpackChunkfun_doc=self.webpackChunkfun_doc||[]).push([[4317],{3538:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-07b3d78b",path:"/interview/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98-%E8%B0%88%E8%B0%88PROMISE.html",title:"前端面试问题-谈谈PROMISE",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"PROMISE的基本使用",slug:"promise的基本使用",children:[]},{level:2,title:"PROMISE的链式调用",slug:"promise的链式调用",children:[]},{level:2,title:"PROMISE.ALL的使用",slug:"promise-all的使用",children:[]},{level:2,title:"PROMISE.RACE用法",slug:"promise-race用法",children:[]}],filePathRelative:"interview/前端/前端面试问题-谈谈PROMISE.md",git:{updatedTime:162452411e4,contributors:[{name:"caifang",email:"cooldish1245@163.com",commits:1}]}}},6228:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="前端面试问题-谈谈promise"><a class="header-anchor" href="#前端面试问题-谈谈promise">#</a> 前端面试问题-谈谈PROMISE</h1><p>Promise是ES6中处理异步的一种方案。使用范围还是比较广的。</p><h2 id="promise的基本使用"><a class="header-anchor" href="#promise的基本使用">#</a> PROMISE的基本使用</h2><p>使用方式：Promise构造函数接收一个function，这个函数中，有两个参数resolve和reject分别处理成功和失败的回调。</p><p>先看一个常规加载图片，监听回调的例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token parameter">img<span class="token punctuation">,</span> src</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\timg<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>’load success’<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\timg<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>’load error’<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\timg<span class="token punctuation">.</span>src <span class="token operator">=</span> src\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> img1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>’img1’<span class="token punctuation">)</span>\n<span class="token function">loadImage</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> ’images<span class="token operator">/</span>x<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span> <span class="token comment">//图片加载成功回调onload方法，加载失败，回调onerror方法。</span>\n\n<span class="token comment">//封装成Promise处理异步:</span>\n<span class="token comment">//用Promise包装我们的异步方法。 创建promise就开始执行我们的方法了</span>\n<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">let</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>’img1’<span class="token punctuation">)</span>\n\timg<span class="token punctuation">.</span>src <span class="token operator">=</span> ’images<span class="token operator">/</span>a<span class="token punctuation">.</span>jpg’\n\timg<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">resolve</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>src<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\timg<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">reject</span><span class="token punctuation">(</span>’load error’<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>获取异步结果的方式有两种：</p><ul><li><code>p.then(successFunc,failFunc)</code></li><li><code>p.then(successFunc).catch(failFunc)</code></li></ul><p>对应例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n\t<span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="promise的链式调用"><a class="header-anchor" href="#promise的链式调用">#</a> PROMISE的链式调用</h2><p>前面的加载图片的Promise我们可以这样写：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token parameter">img<span class="token punctuation">,</span> src</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\timg<span class="token punctuation">.</span>src <span class="token operator">=</span> src\n\t\timg<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token function">resolve</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>src<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t\timg<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token function">reject</span><span class="token punctuation">(</span>’load error’<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//即加载图片返回Promise对象。</span>\n<span class="token comment">//用链式调用实现img1加载完成再加载img2,最后加载img3:</span>\n\n<span class="token function">loadImage</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> ’images<span class="token operator">/</span>a<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">loadImage</span><span class="token punctuation">(</span>img2<span class="token punctuation">,</span> ’images<span class="token operator">/</span>b<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">loadImage</span><span class="token punctuation">(</span>img3<span class="token punctuation">,</span> ’images<span class="token operator">/</span>c<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>以上加载有先后顺序，当然我们可以同时加载多个promise.</p><h2 id="promise-all的使用"><a class="header-anchor" href="#promise-all的使用">#</a> PROMISE.ALL的使用</h2><p>实现多个异步方法同时执行，所有执行完成统一处理。</p><p>定义3个Promise</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> img1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>’img1’<span class="token punctuation">)</span>\n<span class="token keyword">let</span> img2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>’img2’<span class="token punctuation">)</span>\n<span class="token keyword">let</span> img3 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>’img3’<span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> ’images<span class="token operator">/</span>a<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span>\n<span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>img2<span class="token punctuation">,</span> ’images<span class="token operator">/</span>b<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span>\n<span class="token keyword">let</span> p3 <span class="token operator">=</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>img3<span class="token punctuation">,</span> ’images<span class="token operator">/</span>c<span class="token punctuation">.</span>jpg’<span class="token punctuation">)</span>\n\n\nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>处理所有异步请求：\n\nPromise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><blockquote><p>将打印[”/images/a.jpg”, ”/images/b.jpg”, ”/images/c.jpg”],说明Promise.all会把所有promise的结果整合成数组，统一返回。</p></blockquote><h2 id="promise-race用法"><a class="header-anchor" href="#promise-race用法">#</a> PROMISE.RACE用法</h2><p>同Promise.all,也是多个异步方法同时执行，但Promise.race是拿到最早异步获取的结果返回。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>将打印”/images/a.jpg”因为，上面例子中我用的图片a.jpg最小，另外两张图都很大，a.jpg加载最快。（当图片大小差不多时，可能看不出来race的效果，但返回的不再是数组。而是最早异步获取的结果）s</p></blockquote>',23),t={render:function(n,s){return p}}}}]);